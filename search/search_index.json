{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Mathesar Documentation \u00b6 Welcome! \u00b6 Mathesar is a self-hostable open source project that provides a spreadsheet-like interface to a PostgreSQL database. Our web-based interface helps you and your collaborators set up data models, edit data, and build custom reports \u2013 no technical skills needed. You can create a new PostgreSQL database while setting up Mathesar or use our UI to interact with an existing database (or do both). A live demo of Mathesar is available here . Installing Mathesar \u00b6 You can self-host Mathesar by following one of the guides below: Install with Docker Compose Install from scratch (on Linux) Install with our guided installation script Install using Docker image (needs an external database server) More installation methods coming soon We\u2019re working on supporting additional installation methods, and we\u2019d appreciate feedback on which ones to prioritize. Please comment on this issue if you have thoughts. Using Mathesar \u00b6 Mathesar should be pretty intuitive to use. More documentation is coming soon, but for now, we\u2019ve written some documentation for some things that could be tricky. Syncing Database Changes Users & Access Levels Contributing \u00b6 As an open source project, we actively encourage contribution! Get started by reading our Contributor Guide . Donate \u00b6 We\u2019re a non-profit and your donations help sustain our core team. You can donate via GitHub or Open Collective .","title":"Welcome"},{"location":"#mathesar-documentation","text":"","title":"Mathesar Documentation"},{"location":"#welcome","text":"Mathesar is a self-hostable open source project that provides a spreadsheet-like interface to a PostgreSQL database. Our web-based interface helps you and your collaborators set up data models, edit data, and build custom reports \u2013 no technical skills needed. You can create a new PostgreSQL database while setting up Mathesar or use our UI to interact with an existing database (or do both). A live demo of Mathesar is available here .","title":"Welcome!"},{"location":"#installing-mathesar","text":"You can self-host Mathesar by following one of the guides below: Install with Docker Compose Install from scratch (on Linux) Install with our guided installation script Install using Docker image (needs an external database server) More installation methods coming soon We\u2019re working on supporting additional installation methods, and we\u2019d appreciate feedback on which ones to prioritize. Please comment on this issue if you have thoughts.","title":"Installing Mathesar"},{"location":"#using-mathesar","text":"Mathesar should be pretty intuitive to use. More documentation is coming soon, but for now, we\u2019ve written some documentation for some things that could be tricky. Syncing Database Changes Users & Access Levels","title":"Using Mathesar"},{"location":"#contributing","text":"As an open source project, we actively encourage contribution! Get started by reading our Contributor Guide .","title":"Contributing"},{"location":"#donate","text":"We\u2019re a non-profit and your donations help sustain our core team. You can donate via GitHub or Open Collective .","title":"Donate"},{"location":"administration/uninstall/","text":"Uninstall Mathesar \u00b6 The uninstall instructions vary depending on the installation method you chose. Select your installation method below to proceed. Uninstall a guided installation of Mathesar Uninstall a Docker compose installation of Mathesar Uninstall a Docker installation of Mathesar Uninstall a source-built installation of Mathesar","title":"Uninstall Mathesar"},{"location":"administration/uninstall/#uninstall-mathesar","text":"The uninstall instructions vary depending on the installation method you chose. Select your installation method below to proceed. Uninstall a guided installation of Mathesar Uninstall a Docker compose installation of Mathesar Uninstall a Docker installation of Mathesar Uninstall a source-built installation of Mathesar","title":"Uninstall Mathesar"},{"location":"administration/upgrade/","text":"Upgrade Mathesar \u00b6 Upgrade Mathesar via the web interface \u00b6 Note In-app upgrades are only possible after installing Mathesar via our guided script or our Docker compose instructions. Open the Settings menu at the top right of the screen, and click on Administration . You should now see the \u201cSoftware Update\u201d page. If a new version of Mathesar can be installed automatically, then you will see a \u201cNew Version Available\u201d box containing an Upgrade button. Click the button to begin the upgrade, and follow the on-screen instructions after that. Upgrade Mathesar via the command line \u00b6 The upgrade instructions vary depending on the installation method you chose. Select your installation method below to proceed. Upgrade a guided installation of Mathesar Upgrade a Docker compose installation of Mathesar Upgrade a Docker installation of Mathesar Upgrade a source-built installation of Mathesar","title":"Upgrade Mathesar"},{"location":"administration/upgrade/#upgrade-mathesar","text":"","title":"Upgrade Mathesar"},{"location":"administration/upgrade/#upgrade-mathesar-via-the-web-interface","text":"Note In-app upgrades are only possible after installing Mathesar via our guided script or our Docker compose instructions. Open the Settings menu at the top right of the screen, and click on Administration . You should now see the \u201cSoftware Update\u201d page. If a new version of Mathesar can be installed automatically, then you will see a \u201cNew Version Available\u201d box containing an Upgrade button. Click the button to begin the upgrade, and follow the on-screen instructions after that.","title":"Upgrade Mathesar via the web interface"},{"location":"administration/upgrade/#upgrade-mathesar-via-the-command-line","text":"The upgrade instructions vary depending on the installation method you chose. Select your installation method below to proceed. Upgrade a guided installation of Mathesar Upgrade a Docker compose installation of Mathesar Upgrade a Docker installation of Mathesar Upgrade a source-built installation of Mathesar","title":"Upgrade Mathesar via the command line"},{"location":"configuration/connect-to-existing-db/","text":"Connect to an external database server \u00b6 On the existing database server, create a new database for Mathesar to store its metadata. psql -c 'create database mathesar_django;' Configure the DJANGO_DATABASE_URL environment variable to point to the database you just created. (Optional) For Docker Compose related installations, you may disable Mathesar\u2019s default database server if you like. Connect to a database server running on the host \u00b6 This content is related to Mathesar running in Docker related environments. This is applicable for the Guided installation method , Docker Compose installation method , and Docker installation method . If you\u2019re running Mathesar in a Docker related environment, and your database server runs on the host machine, you will not be able to connect to it using localhost:<db_port> , since localhost would refer to the Docker environment and not to the host. You can try using host.docker.internal instead of localhost . Below are detailed instructions to expose the database on your host to the Docker instance. Prerequisites \u00b6 Locate postgresql.conf & pg_hba.conf file on the host machine. This can be located using psql shell by executing the following respectively. SHOW config_file; and SHOW hba_file; 1. Create the necessary network bridges using docker-compose docker compose -f docker-compose.yml up service -d --no-start Find the appropriate IP addresses of the docker0 interface and the mathesar_default interface. This can be found by exectuting the following in the host\u2019s terminal. docker network inspect -f \"docker0 IP: {{range .IPAM.Config}}{{.Gateway}}{{end}}\" bridge && docker network inspect -f \"mathesar_default IP: {{range .IPAM.Config}}{{.Subnet}}{{end}}\" mathesar_default Stop Mathesar if it\u2019s already running. Steps \u00b6 Edit the postgresql.conf file and add the IP of docker0 interface in the listen_addresses setting. Uncomment this line if it\u2019s conmmented out. listen_addresses = 'localhost, <your-docker0-ip>' Modify the pg_hba.conf file and grant access to the mathesar_default interface. Add the following line at the bottom of the file: host all all <your-mathesar_default-ip> md5 Restart postgres: Linux MacOS sudo systemctl restart postgresql sudo brew services restart postgresql Set the value of MATHESAR_DATABASES environment variable to the following: MATHESAR_DATABASES=(<unique_id>|postgresql://<user_name>:<password>@host.docker.internal:<port-no>/<host_db_name>) If your Mathesar installation is Docker Compose based, add an extra host for the prod container in the docker-compose.yml file: extra_hosts: - \"host.docker.internal:<your-docker0-ip>\" Start Mathesar. You should have a successful connection to the host database now!","title":"Connect to an existing database server"},{"location":"configuration/connect-to-existing-db/#connect-to-an-external-database-server","text":"On the existing database server, create a new database for Mathesar to store its metadata. psql -c 'create database mathesar_django;' Configure the DJANGO_DATABASE_URL environment variable to point to the database you just created. (Optional) For Docker Compose related installations, you may disable Mathesar\u2019s default database server if you like.","title":"Connect to an external database server"},{"location":"configuration/connect-to-existing-db/#localhost-db","text":"This content is related to Mathesar running in Docker related environments. This is applicable for the Guided installation method , Docker Compose installation method , and Docker installation method . If you\u2019re running Mathesar in a Docker related environment, and your database server runs on the host machine, you will not be able to connect to it using localhost:<db_port> , since localhost would refer to the Docker environment and not to the host. You can try using host.docker.internal instead of localhost . Below are detailed instructions to expose the database on your host to the Docker instance.","title":"Connect to a database server running on the host"},{"location":"configuration/connect-to-existing-db/#prerequisites","text":"Locate postgresql.conf & pg_hba.conf file on the host machine. This can be located using psql shell by executing the following respectively. SHOW config_file; and SHOW hba_file; 1. Create the necessary network bridges using docker-compose docker compose -f docker-compose.yml up service -d --no-start Find the appropriate IP addresses of the docker0 interface and the mathesar_default interface. This can be found by exectuting the following in the host\u2019s terminal. docker network inspect -f \"docker0 IP: {{range .IPAM.Config}}{{.Gateway}}{{end}}\" bridge && docker network inspect -f \"mathesar_default IP: {{range .IPAM.Config}}{{.Subnet}}{{end}}\" mathesar_default Stop Mathesar if it\u2019s already running.","title":"Prerequisites"},{"location":"configuration/connect-to-existing-db/#steps","text":"Edit the postgresql.conf file and add the IP of docker0 interface in the listen_addresses setting. Uncomment this line if it\u2019s conmmented out. listen_addresses = 'localhost, <your-docker0-ip>' Modify the pg_hba.conf file and grant access to the mathesar_default interface. Add the following line at the bottom of the file: host all all <your-mathesar_default-ip> md5 Restart postgres: Linux MacOS sudo systemctl restart postgresql sudo brew services restart postgresql Set the value of MATHESAR_DATABASES environment variable to the following: MATHESAR_DATABASES=(<unique_id>|postgresql://<user_name>:<password>@host.docker.internal:<port-no>/<host_db_name>) If your Mathesar installation is Docker Compose based, add an extra host for the prod container in the docker-compose.yml file: extra_hosts: - \"host.docker.internal:<your-docker0-ip>\" Start Mathesar. You should have a successful connection to the host database now!","title":"Steps"},{"location":"configuration/customize-docker-compose/","text":"Customize Docker Compose related installations \u00b6 This document is related to Mathesar running in Docker Compose related environments. This is applicable for the Guided Installation method , and Docker Compose Installation method . Default database server \u00b6 The default docker-compose.yml includes a db service that automatically starts a Postgres database server container called mathesar_db . This service allows you to start using Mathesar immediately to store data in a Postgres database without administering a separate Postgres server outside Mathesar. The db service runs on the internal docker compose port 5432 . The internal port is not bound to the host to avoid conflicts with other services running on port 5432 . Additionally, it comes with a default database and a superuser. This database can come in handy for storing Mathesar\u2019s metadata . The credentials for the Default database are: DATABASE_NAME='mathesar_django' USER='mathesar' PASSWORD='mathesar' you can disable the default database server if you plan on using an existing database server . Disable the default database server \u00b6 The default docker-compose.yml automatically starts a Postgres database server container . You may disable it if you plan on using a different Database server. In the docker-compose.yml file, comment out the db services and the depends_on field of the service . services : # db: # image: postgres:13 # container_name: mathesar_db # environment: # # These environment variables are used to create a database and superuser when the `db` service starts. # # Refer to https://hub.docker.com/_/postgres for more information on these variables. # - POSTGRES_DB=${POSTGRES_DB-mathesar_django} # - POSTGRES_USER=${POSTGRES_USER-mathesar} # - POSTGRES_PASSWORD=${POSTGRES_PASSWORD-mathesar} # expose: # - \"5432\" # volumes: # - postgresql_data:/var/lib/postgresql/data # healthcheck: # test: [ \"CMD-SHELL\", \"pg_isready -d $${POSTGRES_DB-mathesar_django} -U $${POSTGRES_USER-mathesar}\"] # interval: 5s # timeout: 1s # retries: 30 # start_period: 5s # ... service : # ... volumes : - static:/code/static - media:/code/media # Comment the below field to disable starting the database service automatically # depends_on: # db: # condition: service_healthy After this change, Mathesar will no longer start the db service automatically. Run Mathesar on a non-standard HTTP port \u00b6 By default, Caddy serves the Mathesar web application on a port as determined by the protocol within your DOMAIN_NAME environment variable . For http domain names it uses port 80 . For https domain names (as is the default, if not specified) it uses port 443 and redirects any traffic pointed at http to https . In this case, Caddy also creates an SSL certificate automatically . Warning If you don\u2019t have access to port 443 , avoid using https domain names on a non-standard port. Due to the following reasons: Caddy won\u2019t be able to verify the SSL certificate when running on a non-standard port. Browsers automatically redirect traffic sent to the http domain to the standard https port (443), rather than to any non-standard HTTPS_PORT port that you may have configured. To use a non-standard port: Edit your .env file and set either the HTTP_PORT or the HTTPS_PORT environment variable (depending on the protocol you\u2019re using). Example To serve Mathesar at http://localhost:9000 , include the following in your .env file: DOMAIN_NAME = 'http://localhost' HTTP_PORT = 9000 Restart the container Linux MacOS sudo docker compose -f docker-compose.yml up caddy-reverse-proxy -d docker compose -f docker-compose.yml up caddy-reverse-proxy -d","title":"Customize Docker Compose installations"},{"location":"configuration/customize-docker-compose/#customize-docker-compose-related-installations","text":"This document is related to Mathesar running in Docker Compose related environments. This is applicable for the Guided Installation method , and Docker Compose Installation method .","title":"Customize Docker Compose related installations"},{"location":"configuration/customize-docker-compose/#default-db","text":"The default docker-compose.yml includes a db service that automatically starts a Postgres database server container called mathesar_db . This service allows you to start using Mathesar immediately to store data in a Postgres database without administering a separate Postgres server outside Mathesar. The db service runs on the internal docker compose port 5432 . The internal port is not bound to the host to avoid conflicts with other services running on port 5432 . Additionally, it comes with a default database and a superuser. This database can come in handy for storing Mathesar\u2019s metadata . The credentials for the Default database are: DATABASE_NAME='mathesar_django' USER='mathesar' PASSWORD='mathesar' you can disable the default database server if you plan on using an existing database server .","title":"Default database server"},{"location":"configuration/customize-docker-compose/#disable-db-service","text":"The default docker-compose.yml automatically starts a Postgres database server container . You may disable it if you plan on using a different Database server. In the docker-compose.yml file, comment out the db services and the depends_on field of the service . services : # db: # image: postgres:13 # container_name: mathesar_db # environment: # # These environment variables are used to create a database and superuser when the `db` service starts. # # Refer to https://hub.docker.com/_/postgres for more information on these variables. # - POSTGRES_DB=${POSTGRES_DB-mathesar_django} # - POSTGRES_USER=${POSTGRES_USER-mathesar} # - POSTGRES_PASSWORD=${POSTGRES_PASSWORD-mathesar} # expose: # - \"5432\" # volumes: # - postgresql_data:/var/lib/postgresql/data # healthcheck: # test: [ \"CMD-SHELL\", \"pg_isready -d $${POSTGRES_DB-mathesar_django} -U $${POSTGRES_USER-mathesar}\"] # interval: 5s # timeout: 1s # retries: 30 # start_period: 5s # ... service : # ... volumes : - static:/code/static - media:/code/media # Comment the below field to disable starting the database service automatically # depends_on: # db: # condition: service_healthy After this change, Mathesar will no longer start the db service automatically.","title":"Disable the default database server"},{"location":"configuration/customize-docker-compose/#non-standard-port","text":"By default, Caddy serves the Mathesar web application on a port as determined by the protocol within your DOMAIN_NAME environment variable . For http domain names it uses port 80 . For https domain names (as is the default, if not specified) it uses port 443 and redirects any traffic pointed at http to https . In this case, Caddy also creates an SSL certificate automatically . Warning If you don\u2019t have access to port 443 , avoid using https domain names on a non-standard port. Due to the following reasons: Caddy won\u2019t be able to verify the SSL certificate when running on a non-standard port. Browsers automatically redirect traffic sent to the http domain to the standard https port (443), rather than to any non-standard HTTPS_PORT port that you may have configured. To use a non-standard port: Edit your .env file and set either the HTTP_PORT or the HTTPS_PORT environment variable (depending on the protocol you\u2019re using). Example To serve Mathesar at http://localhost:9000 , include the following in your .env file: DOMAIN_NAME = 'http://localhost' HTTP_PORT = 9000 Restart the container Linux MacOS sudo docker compose -f docker-compose.yml up caddy-reverse-proxy -d docker compose -f docker-compose.yml up caddy-reverse-proxy -d","title":"Run Mathesar on a non-standard HTTP port"},{"location":"configuration/env-variables/","text":"Environment Variables \u00b6 This page contains all available environment variables supported by Mathesar. See the specific installation guides for the applicable environment variables and instructions on how to set them. Backend configuration \u00b6 SECRET_KEY \u00b6 Description : A unique random string used by Django for cryptographic signing ( see Django docs ). Format : A 50 character string Additional information : You can generate a secret key using this tool if needed. ALLOWED_HOSTS \u00b6 Description : A list of hostnames that Mathesar will be accessible at ( see Django docs ). Hostnames should not contain the protocol (e.g. http ) or trailing slashes. You can use localhost in this list. Format : Comma separated string of hostnames Valid values mathesar.example.com, localhost .localhost, mathesar.example.com, 35.188.184.125 Invalid values http://mathesar.example.com/ - contains HTTP protocol and a trailing slash https://mathesar.example.com - contains HTTPS protocol localhost/, 35.188.184.125 - contains trailing slash after localhost DJANGO_DATABASE_URL \u00b6 Description : A Postgres connection string of the database used for Mathesar\u2019s internal usage . Format : postgres://user:password@hostname:port/database_name The connection string above will connect to a database with username user , password password , hostname mathesar_db , port 5432 , and database name mathesar_django . MATHESAR_DATABASES \u00b6 Description : Names and connection information for databases managed by Mathesar. These databases will be accessible through the UI. Format : (unique_id|connection_string),(unique_id|connection_string),... e.g. (db1|postgresql://u:p@example.com:5432/db1),(db2|postgresql://u:p@example.com:5432/db2) This would set Mathesar to connect to two databases, db1 and db2 which are both accessed via the same user u , password p , hostname example.com , and port 5432 . Caddy reverse proxy configuration \u00b6 DOMAIN_NAME \u00b6 Description : The public URL that will be used to access Mathesar ( see Caddy docs ). Format : A URL or hostname Example values https://example.com localhost http://localhost Additional information If the protocol is http , then Caddy will serve traffic via HTTP only. If the protocol is https or is not specified, then Caddy will serve traffic via HTTPS (and will redirect all HTTP traffic to HTTPS). In this case Caddy will also attempt to automatically set up HTTPS with Let\u2019s Encrypt for you ( see Caddy docs ). Tip Set this to localhost if you\u2019d like Mathesar to be available only on localhost Set the protocol to http if you don\u2019t want Caddy to automatically handle setting up SSL, e.g. http://example.com HTTP_PORT \u00b6 Description : Configures the port that Caddy will use when DOMAIN_NAME specifies a http protocol. Default value : 80 Tip It is recommended to use the default port 80 as features like automatic SSL rely on it ( see Caddy docs ). You probably want to change it to a different port if one of these is true: you already have a reverse proxy handling SSL on your system you are running Mathesar on a non-root system HTTPS_PORT \u00b6 Description : Configures the port that Caddy will use when DOMAIN_NAME specifies a https protocol or does not specify a protocol. Default value : 443 Tip If you want Caddy to handle the SSL certificate it is highly recommended to use the default port 443 as features like automatic SSL, and HTTPS redirection rely on it ( see Caddy docs ). You probably want to change it to a different port if one of these is true: you already have a reverse proxy handling SSL on your system you are running Mathesar on a non-root system","title":"Environment variables"},{"location":"configuration/env-variables/#environment-variables","text":"This page contains all available environment variables supported by Mathesar. See the specific installation guides for the applicable environment variables and instructions on how to set them.","title":"Environment Variables"},{"location":"configuration/env-variables/#backend","text":"","title":"Backend configuration"},{"location":"configuration/env-variables/#secret_key","text":"Description : A unique random string used by Django for cryptographic signing ( see Django docs ). Format : A 50 character string Additional information : You can generate a secret key using this tool if needed.","title":"SECRET_KEY"},{"location":"configuration/env-variables/#allowed_hosts","text":"Description : A list of hostnames that Mathesar will be accessible at ( see Django docs ). Hostnames should not contain the protocol (e.g. http ) or trailing slashes. You can use localhost in this list. Format : Comma separated string of hostnames Valid values mathesar.example.com, localhost .localhost, mathesar.example.com, 35.188.184.125 Invalid values http://mathesar.example.com/ - contains HTTP protocol and a trailing slash https://mathesar.example.com - contains HTTPS protocol localhost/, 35.188.184.125 - contains trailing slash after localhost","title":"ALLOWED_HOSTS"},{"location":"configuration/env-variables/#django_database_url","text":"Description : A Postgres connection string of the database used for Mathesar\u2019s internal usage . Format : postgres://user:password@hostname:port/database_name The connection string above will connect to a database with username user , password password , hostname mathesar_db , port 5432 , and database name mathesar_django .","title":"DJANGO_DATABASE_URL"},{"location":"configuration/env-variables/#mathesar_databases","text":"Description : Names and connection information for databases managed by Mathesar. These databases will be accessible through the UI. Format : (unique_id|connection_string),(unique_id|connection_string),... e.g. (db1|postgresql://u:p@example.com:5432/db1),(db2|postgresql://u:p@example.com:5432/db2) This would set Mathesar to connect to two databases, db1 and db2 which are both accessed via the same user u , password p , hostname example.com , and port 5432 .","title":"MATHESAR_DATABASES"},{"location":"configuration/env-variables/#caddy","text":"","title":"Caddy reverse proxy configuration"},{"location":"configuration/env-variables/#domain_name","text":"Description : The public URL that will be used to access Mathesar ( see Caddy docs ). Format : A URL or hostname Example values https://example.com localhost http://localhost Additional information If the protocol is http , then Caddy will serve traffic via HTTP only. If the protocol is https or is not specified, then Caddy will serve traffic via HTTPS (and will redirect all HTTP traffic to HTTPS). In this case Caddy will also attempt to automatically set up HTTPS with Let\u2019s Encrypt for you ( see Caddy docs ). Tip Set this to localhost if you\u2019d like Mathesar to be available only on localhost Set the protocol to http if you don\u2019t want Caddy to automatically handle setting up SSL, e.g. http://example.com","title":"DOMAIN_NAME"},{"location":"configuration/env-variables/#http_port","text":"Description : Configures the port that Caddy will use when DOMAIN_NAME specifies a http protocol. Default value : 80 Tip It is recommended to use the default port 80 as features like automatic SSL rely on it ( see Caddy docs ). You probably want to change it to a different port if one of these is true: you already have a reverse proxy handling SSL on your system you are running Mathesar on a non-root system","title":"HTTP_PORT"},{"location":"configuration/env-variables/#https_port","text":"Description : Configures the port that Caddy will use when DOMAIN_NAME specifies a https protocol or does not specify a protocol. Default value : 443 Tip If you want Caddy to handle the SSL certificate it is highly recommended to use the default port 443 as features like automatic SSL, and HTTPS redirection rely on it ( see Caddy docs ). You probably want to change it to a different port if one of these is true: you already have a reverse proxy handling SSL on your system you are running Mathesar on a non-root system","title":"HTTPS_PORT"},{"location":"installation/build-from-source/","text":"Install Mathesar from source on Linux \u00b6 For experienced Linux sysadmins To follow this guide you need be experienced with Linux server administration, including the command line interface and some common utilities. Requirements \u00b6 System \u00b6 We recommend having at least 60 GB disk space and 4 GB of RAM. Operating System \u00b6 We\u2019ve tested this on Ubuntu , but we expect that it can be adapted for other Linux distributions as well. Access \u00b6 You should have root access to the machine you\u2019re installing Mathesar on. Software \u00b6 You\u2019ll need to install the following system packages before you install Mathesar: Python 3.9 Python version Python older than 3.9 will not run Mathesar. Python newer than 3.9 will run Mathesar, but will require some slightly modified installation steps which we have not yet documented . PostgreSQL 13 or newer (Verify with psql --version ) NodeJS 14 or newer (Verify with node --version ) (This is required for installation only and will eventually be relaxed ) npm 6 or newer (Verify with npm --version ) (This is required for installation only and will eventually be relaxed ) Caddy (Verify with caddy version ) git (Verify with git --version ) Domain (optional) \u00b6 If you want Mathesar to be accessible over the internet, you\u2019ll probably want to set up a domain or sub-domain to use. If you don\u2019t need a domain, you can skip this section. Before you start installation, ensure that the DNS for your sub-domain or domain is pointing to the machine that you\u2019re installing Mathesar on . Customizing this Guide \u00b6 Type your domain name into the box below. Do not include a trailing slash. Then press Enter to customize this guide with your domain name. Installation Steps \u00b6 Set up the database \u00b6 Open a psql shell. sudo -u postgres psql Mathesar needs a Postgres superuser to function correctly. Let\u2019s create a superuser. CREATE USER mathesar WITH SUPERUSER ENCRYPTED PASSWORD '1234' ; Customize your password Be sure to change the password 1234 in the command above to something more secure and private. Record your custom password somewhere safe. You will need to reference it later. Next, we have to create a database for storing Mathesar metadata. CREATE DATABASE mathesar_django ; Now we let us create a database for storing your data. CREATE DATABASE your_db_name ; Press Ctrl + D to exit the psql shell. Set up your installation directory \u00b6 Choose a directory to store the Mathesar application files. Examples /home/my_user_name/mathesar /etc/mathesar Type your installation directory into the box below. Do not include a trailing slash. Then press Enter to customize this guide with your installation directory. Create your installation directory. mkdir -p xMATHESAR_INSTALLATION_DIRx When installing outside your home folder If you choose a directory outside your home folder, then you\u2019ll need to create it with sudo and choose an appropriate owner for the directory (i.e. root or a custom user of your choosing). The remainder of this guide requires you to run commands with full permissions inside your installation directory . You can do this, for example via: chown my_user_name: xMATHESAR_INSTALLATION_DIRx Or sudo su Navigate into your installation directory. cd xMATHESAR_INSTALLATION_DIRx The remaining commands in this guide should be run from within your installation directory. Set up the environment \u00b6 Clone the git repo into the installation directory. git clone https://github.com/centerofci/mathesar.git . Checkout the tag of the latest stable release, 0.1.2 . git checkout 0.1.2 Important If you don\u2019t run the above command you\u2019ll end up installing the latest development version of Mathesar, which will be less stable. Tip You can install a specific Mathesar release by running commands like git checkout 0.1.1 (to install version 0.1.1, for example). You can see all available versions by running git tag . We need to create a python virtual environment for the Mathesar application. <path-to-python-binary> -m venv ./mathesar-venv # /usr/bin/python3.9 -m venv ./mathesar-venv Next we will activate our virtual environment: source ./mathesar-venv/bin/activate Important You need to activate the environment each time you restart the shell as they don\u2019t persist across sessions. Install the Mathesar application \u00b6 Install Python dependencies pip install -r requirements.txt Set the environment variables Create .env file touch .env Edit your .env file, making the following changes: Add the Backend Configuration environment variables Customize the values of the environment variables to suit your needs. Example Your .env file should look something like this ALLOWED_HOSTS = 'xDOMAIN_NAMEx' SECRET_KEY = 'dee551f449ce300ee457d339dcee9682eb1d6f96b8f28feda5283aaa1a21' DJANGO_DATABASE_URL = postgresql://mathesar:1234@localhost:5432/mathesar_django MATHESAR_DATABASES =( your_db_name | postgresql://mathesar:1234@localhost:5432/your_db_name ) Add the environment variables to the shell You need to export the environment variables listed in the .env file to your shell. The easiest way would be to run the below command. export $( sudo cat .env ) Important You need to export the environment variables each time you restart the shell as they don\u2019t persist across sessions. Install the frontend dependencies npm install --prefix mathesar_ui Compile the Mathesar Frontend App npm run --prefix mathesar_ui build --max_old_space_size = 4096 Install Mathesar functions on the database: python install.py --skip-confirm | tee /tmp/install.py.log Create a Mathesar admin/superuser: python manage.py createsuperuser A prompt will appear to ask for the superuser details. Fill in the details to create a superuser. At least one superuser is necessary for accessing Mathesar. See the Django docs for more information on the createsuperuser command Create a media directory for storing user-uploaded media mkdir .media Set up Gunicorn \u00b6 We will use systemd to run the gunicorn service as it lets you use easily start and manage the service. Create a user for running Gunicorn sudo groupadd gunicorn && \\ sudo useradd gunicorn -g gunicorn Create the Gunicorn systemd service file. sudo touch /lib/systemd/system/gunicorn.service and copy the following code into it. [Unit] Description=gunicorn daemon After=network.target network-online.target Requires=network-online.target [Service] Type=notify User=gunicorn Group=gunicorn RuntimeDirectory=gunicorn WorkingDirectory=xMATHESAR_INSTALLATION_DIRx ExecStart=/bin/bash -c 'xMATHESAR_INSTALLATION_DIRx/mathesar-venv/bin/gunicorn config.wsgi:application' EnvironmentFile=xMATHESAR_INSTALLATION_DIRx/.env [Install] WantedBy=multi-user.target Reload the systemctl and Start the Gunicorn socket sudo systemctl daemon-reload && \\ sudo systemctl start gunicorn.service && \\ sudo systemctl enable gunicorn.service Check the logs to verify if Gunicorn is running without any errors sudo journalctl --priority = notice --unit = gunicorn.service Set up the Caddy reverse proxy \u00b6 We will be using the Caddy Reverse proxy to serve the static files and set up SSL certificates. Create the CaddyFile sudo touch /etc/caddy/Caddyfile Add the configuration details to the CaddyFile https://xDOMAIN_NAMEx { log { output stdout } respond /caddy-health-check 200 encode zstd gzip handle_path /media/* { @downloads { query dl=* } header @downloads Content-disposition \"attachment; filename={query.dl}\" file_server { precompressed br zstd gzip root {$MEDIA_ROOT:xMATHESAR_INSTALLATION_DIRx/.media/} } } handle_path /static/* { file_server { precompressed br zstd gzip root {$STATIC_ROOT:xMATHESAR_INSTALLATION_DIRx/static/} } } reverse_proxy localhost:8000 } Create a user for running Caddy sudo groupadd caddy && \\ sudo useradd caddy -g caddy Create the Caddy systemd service file. sudo touch /lib/systemd/system/caddy.service and copy the following code into it. [Unit] Description=Caddy Documentation=https://caddyserver.com/docs/ After=network.target network-online.target Requires=network-online.target [Service] Type=notify User=caddy Group=caddy ExecStart=/usr/bin/caddy run --config /etc/caddy/Caddyfile ExecReload=/usr/bin/caddy reload --config /etc/caddy/Caddyfile --force TimeoutStopSec=5s LimitNOFILE=1048576 LimitNPROC=512 PrivateTmp=true ProtectSystem=full AmbientCapabilities=CAP_NET_BIND_SERVICE [Install] WantedBy=multi-user.target Reload the systemctl and start the Caddy socket sudo systemctl daemon-reload && \\ sudo systemctl start caddy.service && \\ sudo systemctl enable caddy.service Check the logs to verify if Caddy is running without any errors sudo journalctl --priority = notice --unit = caddy.service Now you can start using the Mathesar app by visiting the URL xDOMAIN_NAMEx Administration \u00b6 Upgrade \u00b6 Go to your Mathesar installation directory. cd xMATHESAR_INSTALLATION_DIRx Note Your installation directory may be different from above if you used a different directory when installing Mathesar. Pull the latest version from the repository git pull https://github.com/centerofci/mathesar.git Update Python dependencies pip install -r requirements.txt Next we will activate our virtual environment: source ./mathesar-venv/bin/activate Add the environment variables to the shell before running Django commands export $( sudo cat .env ) Run the latest Django migrations python manage.py migrate Install the frontend dependencies npm install --prefix mathesar_ui Build the Mathesar frontend app npm run --prefix mathesar_ui build --max_old_space_size = 4096 Update Mathesar functions on the database: python install.py --skip-confirm >> /tmp/install.py.log Restart the gunicorn server sudo systemctl restart gunicorn Uninstalling Mathesar \u00b6 Stop Caddy service sudo systemctl disable caddy.service && sudo systemctl stop caddy.service Remove Caddy service file and Caddyfile sudo rm /lib/systemd/system/caddy.service && sudo rm /etc/caddy/Caddyfile Stop Gunicorn sudo systemctl disable gunicorn.service && sudo systemctl stop gunicorn.service Remove Gunicorn service file sudo rm /lib/systemd/system/gunicorn.service Remove your Mathesar installation directory sudo rm -r xMATHESAR_INSTALLATION_DIRx Your installation directory might be customized It\u2019s possible that Mathesar could have been installed into a different directory than shown above. Use caution when deleting this directory. Remove Django database Connect to the psql terminal. sudo -u postgres psql Drop the Django database. DROP DATABASE mathesar_django ; Remove Mathesar internal schemas. If you\u2019d like to continue using your PostgreSQL database , you\u2019ll need to remove the schemas created for Mathesar\u2019s use during installation. You can remove them from the database as follows: Connect to the database. psql -h <DB HOSTNAME> -p <DB PORT> -U <DB_USER> <DB_NAME> Delete the types schema. DROP SCHEMA mathesar_types CASCADE ; Deleting this schema will also delete any database objects that depend on it. This should not be an issue if you don\u2019t have any data using Mathesar\u2019s custom data types. Delete the function schemas. DROP SCHEMA msar CASCADE ; DROP SCHEMA __msar CASCADE ;","title":"Install from scratch"},{"location":"installation/build-from-source/#install-mathesar-from-source-on-linux","text":"For experienced Linux sysadmins To follow this guide you need be experienced with Linux server administration, including the command line interface and some common utilities.","title":"Install Mathesar from source on Linux"},{"location":"installation/build-from-source/#requirements","text":"","title":"Requirements"},{"location":"installation/build-from-source/#system","text":"We recommend having at least 60 GB disk space and 4 GB of RAM.","title":"System"},{"location":"installation/build-from-source/#operating-system","text":"We\u2019ve tested this on Ubuntu , but we expect that it can be adapted for other Linux distributions as well.","title":"Operating System"},{"location":"installation/build-from-source/#access","text":"You should have root access to the machine you\u2019re installing Mathesar on.","title":"Access"},{"location":"installation/build-from-source/#software","text":"You\u2019ll need to install the following system packages before you install Mathesar: Python 3.9 Python version Python older than 3.9 will not run Mathesar. Python newer than 3.9 will run Mathesar, but will require some slightly modified installation steps which we have not yet documented . PostgreSQL 13 or newer (Verify with psql --version ) NodeJS 14 or newer (Verify with node --version ) (This is required for installation only and will eventually be relaxed ) npm 6 or newer (Verify with npm --version ) (This is required for installation only and will eventually be relaxed ) Caddy (Verify with caddy version ) git (Verify with git --version )","title":"Software"},{"location":"installation/build-from-source/#domain-optional","text":"If you want Mathesar to be accessible over the internet, you\u2019ll probably want to set up a domain or sub-domain to use. If you don\u2019t need a domain, you can skip this section. Before you start installation, ensure that the DNS for your sub-domain or domain is pointing to the machine that you\u2019re installing Mathesar on .","title":"Domain (optional)"},{"location":"installation/build-from-source/#customizing-this-guide","text":"Type your domain name into the box below. Do not include a trailing slash. Then press Enter to customize this guide with your domain name.","title":"Customizing this Guide"},{"location":"installation/build-from-source/#installation-steps","text":"","title":"Installation Steps"},{"location":"installation/build-from-source/#set-up-the-database","text":"Open a psql shell. sudo -u postgres psql Mathesar needs a Postgres superuser to function correctly. Let\u2019s create a superuser. CREATE USER mathesar WITH SUPERUSER ENCRYPTED PASSWORD '1234' ; Customize your password Be sure to change the password 1234 in the command above to something more secure and private. Record your custom password somewhere safe. You will need to reference it later. Next, we have to create a database for storing Mathesar metadata. CREATE DATABASE mathesar_django ; Now we let us create a database for storing your data. CREATE DATABASE your_db_name ; Press Ctrl + D to exit the psql shell.","title":"Set up the database"},{"location":"installation/build-from-source/#set-up-your-installation-directory","text":"Choose a directory to store the Mathesar application files. Examples /home/my_user_name/mathesar /etc/mathesar Type your installation directory into the box below. Do not include a trailing slash. Then press Enter to customize this guide with your installation directory. Create your installation directory. mkdir -p xMATHESAR_INSTALLATION_DIRx When installing outside your home folder If you choose a directory outside your home folder, then you\u2019ll need to create it with sudo and choose an appropriate owner for the directory (i.e. root or a custom user of your choosing). The remainder of this guide requires you to run commands with full permissions inside your installation directory . You can do this, for example via: chown my_user_name: xMATHESAR_INSTALLATION_DIRx Or sudo su Navigate into your installation directory. cd xMATHESAR_INSTALLATION_DIRx The remaining commands in this guide should be run from within your installation directory.","title":"Set up your installation directory"},{"location":"installation/build-from-source/#set-up-the-environment","text":"Clone the git repo into the installation directory. git clone https://github.com/centerofci/mathesar.git . Checkout the tag of the latest stable release, 0.1.2 . git checkout 0.1.2 Important If you don\u2019t run the above command you\u2019ll end up installing the latest development version of Mathesar, which will be less stable. Tip You can install a specific Mathesar release by running commands like git checkout 0.1.1 (to install version 0.1.1, for example). You can see all available versions by running git tag . We need to create a python virtual environment for the Mathesar application. <path-to-python-binary> -m venv ./mathesar-venv # /usr/bin/python3.9 -m venv ./mathesar-venv Next we will activate our virtual environment: source ./mathesar-venv/bin/activate Important You need to activate the environment each time you restart the shell as they don\u2019t persist across sessions.","title":"Set up the environment"},{"location":"installation/build-from-source/#install-the-mathesar-application","text":"Install Python dependencies pip install -r requirements.txt Set the environment variables Create .env file touch .env Edit your .env file, making the following changes: Add the Backend Configuration environment variables Customize the values of the environment variables to suit your needs. Example Your .env file should look something like this ALLOWED_HOSTS = 'xDOMAIN_NAMEx' SECRET_KEY = 'dee551f449ce300ee457d339dcee9682eb1d6f96b8f28feda5283aaa1a21' DJANGO_DATABASE_URL = postgresql://mathesar:1234@localhost:5432/mathesar_django MATHESAR_DATABASES =( your_db_name | postgresql://mathesar:1234@localhost:5432/your_db_name ) Add the environment variables to the shell You need to export the environment variables listed in the .env file to your shell. The easiest way would be to run the below command. export $( sudo cat .env ) Important You need to export the environment variables each time you restart the shell as they don\u2019t persist across sessions. Install the frontend dependencies npm install --prefix mathesar_ui Compile the Mathesar Frontend App npm run --prefix mathesar_ui build --max_old_space_size = 4096 Install Mathesar functions on the database: python install.py --skip-confirm | tee /tmp/install.py.log Create a Mathesar admin/superuser: python manage.py createsuperuser A prompt will appear to ask for the superuser details. Fill in the details to create a superuser. At least one superuser is necessary for accessing Mathesar. See the Django docs for more information on the createsuperuser command Create a media directory for storing user-uploaded media mkdir .media","title":"Install the Mathesar application"},{"location":"installation/build-from-source/#set-up-gunicorn","text":"We will use systemd to run the gunicorn service as it lets you use easily start and manage the service. Create a user for running Gunicorn sudo groupadd gunicorn && \\ sudo useradd gunicorn -g gunicorn Create the Gunicorn systemd service file. sudo touch /lib/systemd/system/gunicorn.service and copy the following code into it. [Unit] Description=gunicorn daemon After=network.target network-online.target Requires=network-online.target [Service] Type=notify User=gunicorn Group=gunicorn RuntimeDirectory=gunicorn WorkingDirectory=xMATHESAR_INSTALLATION_DIRx ExecStart=/bin/bash -c 'xMATHESAR_INSTALLATION_DIRx/mathesar-venv/bin/gunicorn config.wsgi:application' EnvironmentFile=xMATHESAR_INSTALLATION_DIRx/.env [Install] WantedBy=multi-user.target Reload the systemctl and Start the Gunicorn socket sudo systemctl daemon-reload && \\ sudo systemctl start gunicorn.service && \\ sudo systemctl enable gunicorn.service Check the logs to verify if Gunicorn is running without any errors sudo journalctl --priority = notice --unit = gunicorn.service","title":"Set up Gunicorn"},{"location":"installation/build-from-source/#set-up-the-caddy-reverse-proxy","text":"We will be using the Caddy Reverse proxy to serve the static files and set up SSL certificates. Create the CaddyFile sudo touch /etc/caddy/Caddyfile Add the configuration details to the CaddyFile https://xDOMAIN_NAMEx { log { output stdout } respond /caddy-health-check 200 encode zstd gzip handle_path /media/* { @downloads { query dl=* } header @downloads Content-disposition \"attachment; filename={query.dl}\" file_server { precompressed br zstd gzip root {$MEDIA_ROOT:xMATHESAR_INSTALLATION_DIRx/.media/} } } handle_path /static/* { file_server { precompressed br zstd gzip root {$STATIC_ROOT:xMATHESAR_INSTALLATION_DIRx/static/} } } reverse_proxy localhost:8000 } Create a user for running Caddy sudo groupadd caddy && \\ sudo useradd caddy -g caddy Create the Caddy systemd service file. sudo touch /lib/systemd/system/caddy.service and copy the following code into it. [Unit] Description=Caddy Documentation=https://caddyserver.com/docs/ After=network.target network-online.target Requires=network-online.target [Service] Type=notify User=caddy Group=caddy ExecStart=/usr/bin/caddy run --config /etc/caddy/Caddyfile ExecReload=/usr/bin/caddy reload --config /etc/caddy/Caddyfile --force TimeoutStopSec=5s LimitNOFILE=1048576 LimitNPROC=512 PrivateTmp=true ProtectSystem=full AmbientCapabilities=CAP_NET_BIND_SERVICE [Install] WantedBy=multi-user.target Reload the systemctl and start the Caddy socket sudo systemctl daemon-reload && \\ sudo systemctl start caddy.service && \\ sudo systemctl enable caddy.service Check the logs to verify if Caddy is running without any errors sudo journalctl --priority = notice --unit = caddy.service Now you can start using the Mathesar app by visiting the URL xDOMAIN_NAMEx","title":"Set up the Caddy reverse proxy"},{"location":"installation/build-from-source/#administration","text":"","title":"Administration"},{"location":"installation/build-from-source/#upgrade","text":"Go to your Mathesar installation directory. cd xMATHESAR_INSTALLATION_DIRx Note Your installation directory may be different from above if you used a different directory when installing Mathesar. Pull the latest version from the repository git pull https://github.com/centerofci/mathesar.git Update Python dependencies pip install -r requirements.txt Next we will activate our virtual environment: source ./mathesar-venv/bin/activate Add the environment variables to the shell before running Django commands export $( sudo cat .env ) Run the latest Django migrations python manage.py migrate Install the frontend dependencies npm install --prefix mathesar_ui Build the Mathesar frontend app npm run --prefix mathesar_ui build --max_old_space_size = 4096 Update Mathesar functions on the database: python install.py --skip-confirm >> /tmp/install.py.log Restart the gunicorn server sudo systemctl restart gunicorn","title":"Upgrade"},{"location":"installation/build-from-source/#uninstall","text":"Stop Caddy service sudo systemctl disable caddy.service && sudo systemctl stop caddy.service Remove Caddy service file and Caddyfile sudo rm /lib/systemd/system/caddy.service && sudo rm /etc/caddy/Caddyfile Stop Gunicorn sudo systemctl disable gunicorn.service && sudo systemctl stop gunicorn.service Remove Gunicorn service file sudo rm /lib/systemd/system/gunicorn.service Remove your Mathesar installation directory sudo rm -r xMATHESAR_INSTALLATION_DIRx Your installation directory might be customized It\u2019s possible that Mathesar could have been installed into a different directory than shown above. Use caution when deleting this directory. Remove Django database Connect to the psql terminal. sudo -u postgres psql Drop the Django database. DROP DATABASE mathesar_django ; Remove Mathesar internal schemas. If you\u2019d like to continue using your PostgreSQL database , you\u2019ll need to remove the schemas created for Mathesar\u2019s use during installation. You can remove them from the database as follows: Connect to the database. psql -h <DB HOSTNAME> -p <DB PORT> -U <DB_USER> <DB_NAME> Delete the types schema. DROP SCHEMA mathesar_types CASCADE ; Deleting this schema will also delete any database objects that depend on it. This should not be an issue if you don\u2019t have any data using Mathesar\u2019s custom data types. Delete the function schemas. DROP SCHEMA msar CASCADE ; DROP SCHEMA __msar CASCADE ;","title":"Uninstalling Mathesar"},{"location":"installation/docker/","text":"Install Mathesar web server via Docker \u00b6 Use our official Docker image : mathesar/mathesar-prod:latest hosted on Docker Hub to run Mathesar. Limitations This installation procedure is intended for users who want to run a bare-bones version of the Mathesar web server. It is assumed you already have a database server and services like a reverse proxy typically needed for running a production setup. If you don\u2019t have those, please use the Docker Compose installation documentation . Prerequisites \u00b6 Operating System \u00b6 You can install Mathesar using this method on Linux, MacOS, and Windows. Access \u00b6 You should have permission to run Docker containers on the system. Software \u00b6 You\u2019ll need to install Docker v23+ Databases \u00b6 Database for Mathesar\u2019s internal usage \u00b6 You\u2019ll need to: Create a PostgreSQL database for Mathesar\u2019s internal usage. Create a database user for Mathesar to use. The user should be a SUPERUSER , see PostgreSQL docs for more information . Ensure that this database can accept network connections from the machine you\u2019re installing Mathesar on. Have the following information for this database handy before installation: Database hostname Database port Database name Database username Database password Databases connected to Mathesar\u2019s UI \u00b6 Have the following information for all databases you\u2019d like to connect to Mathesar\u2019s UI before installation: Database hostname Database port Database name Database username (should be a SUPERUSER , see above) Database password Database creation Whenever the Docker container is started, we will attempt to create any databases in this list that don\u2019t already exist. So you don\u2019t need to ensure that they are created before installation. Installation Steps \u00b6 Run the Mathesar Docker Image docker run \\ --detach -e DJANGO_DATABASE_URL = '<replace with a postgres connection string>' \\ -e MATHESAR_DATABASES = '(<unique_db_key>|<replace with a postgres connection array>)' \\ -e SECRET_KEY = '<replace with a 50 character string>' \\ -e ALLOWED_HOSTS = '.localhost, 127.0.0.1, [::1]' \\ -v static:/code/static \\ -v media:/code/media \\ --name mathesar_service \\ -p 8000 :8000 \\ --restart unless-stopped \\ mathesar/mathesar-prod:latest The above command creates a Docker container containing the Mathesar server running on the localhost and listening on port 8000 . It also: Passes configuration options as environment variables to the Docker container. Refer to Configuring Mathesar web server for setting the correct value to these configuration options and for additional configuration options. The configuration options used in the above command are: DJANGO_DATABASE_URL DJANGO_DATABASE_KEY MATHESAR_DATABASES SECRET_KEY Creates two named Docker volumes static for storing static assets like CSS, js files media for storing user-uploaded media files Sets the container name as mathesar_service using the --name parameter, runs the container in a detached mode using the --detach parameter, and binds the port 8000 to the localhost . Refer to Docker documentation for additional configuration options. Verify if the Mathesar server is running successfully: docker logs -f mathesar_service Create a superuser docker exec -it mathesar_service python manage.py createsuperuser A prompt will appear to ask for the superuser details, fill in the details to create a superuser. At least one superuser is necessary for accessing Mathesar. See the Django docs for more information on the createsuperuser command Upgrading Mathesar \u00b6 Stop your existing Mathesar container: docker stop mathesar_service Remove the old Mathesar Image docker rm mathesar_service Bump the image version in the docker run command you usually use to run your Mathesar and start up a brand-new container: docker run \\ -d \\ --name mathesar_service \\ # YOUR STANDARD ARGS HERE mathesar/mathesar-prod:latest Uninstalling Mathesar \u00b6 Remove the Mathesar container. docker rm -v mathesar_service Remove the Mathesar Image docker rmi mathesar_service Remove volumes related to Mathesar docker volume rm static && docker volume rm media Remove Mathesar internal schemas. If you\u2019d like to continue using your PostgreSQL database , you\u2019ll need to remove the schemas created for Mathesar\u2019s use during installation. You can remove them from the database as follows: Connect to the database. psql -h <DB HOSTNAME> -p <DB PORT> -U <DB_USER> <DB_NAME> Delete the types schema. DROP SCHEMA mathesar_types CASCADE ; Deleting this schema will also delete any database objects that depend on it. This should not be an issue if you don\u2019t have any data using Mathesar\u2019s custom data types. Delete the function schemas. DROP SCHEMA msar CASCADE ; DROP SCHEMA __msar CASCADE ;","title":"Install UI-only Docker image"},{"location":"installation/docker/#install-mathesar-web-server-via-docker","text":"Use our official Docker image : mathesar/mathesar-prod:latest hosted on Docker Hub to run Mathesar. Limitations This installation procedure is intended for users who want to run a bare-bones version of the Mathesar web server. It is assumed you already have a database server and services like a reverse proxy typically needed for running a production setup. If you don\u2019t have those, please use the Docker Compose installation documentation .","title":"Install Mathesar web server via Docker"},{"location":"installation/docker/#prerequisites","text":"","title":"Prerequisites"},{"location":"installation/docker/#operating-system","text":"You can install Mathesar using this method on Linux, MacOS, and Windows.","title":"Operating System"},{"location":"installation/docker/#access","text":"You should have permission to run Docker containers on the system.","title":"Access"},{"location":"installation/docker/#software","text":"You\u2019ll need to install Docker v23+","title":"Software"},{"location":"installation/docker/#databases","text":"","title":"Databases"},{"location":"installation/docker/#database-for-mathesars-internal-usage","text":"You\u2019ll need to: Create a PostgreSQL database for Mathesar\u2019s internal usage. Create a database user for Mathesar to use. The user should be a SUPERUSER , see PostgreSQL docs for more information . Ensure that this database can accept network connections from the machine you\u2019re installing Mathesar on. Have the following information for this database handy before installation: Database hostname Database port Database name Database username Database password","title":"Database for Mathesar's internal usage"},{"location":"installation/docker/#databases-connected-to-mathesars-ui","text":"Have the following information for all databases you\u2019d like to connect to Mathesar\u2019s UI before installation: Database hostname Database port Database name Database username (should be a SUPERUSER , see above) Database password Database creation Whenever the Docker container is started, we will attempt to create any databases in this list that don\u2019t already exist. So you don\u2019t need to ensure that they are created before installation.","title":"Databases connected to Mathesar's UI"},{"location":"installation/docker/#installation-steps","text":"Run the Mathesar Docker Image docker run \\ --detach -e DJANGO_DATABASE_URL = '<replace with a postgres connection string>' \\ -e MATHESAR_DATABASES = '(<unique_db_key>|<replace with a postgres connection array>)' \\ -e SECRET_KEY = '<replace with a 50 character string>' \\ -e ALLOWED_HOSTS = '.localhost, 127.0.0.1, [::1]' \\ -v static:/code/static \\ -v media:/code/media \\ --name mathesar_service \\ -p 8000 :8000 \\ --restart unless-stopped \\ mathesar/mathesar-prod:latest The above command creates a Docker container containing the Mathesar server running on the localhost and listening on port 8000 . It also: Passes configuration options as environment variables to the Docker container. Refer to Configuring Mathesar web server for setting the correct value to these configuration options and for additional configuration options. The configuration options used in the above command are: DJANGO_DATABASE_URL DJANGO_DATABASE_KEY MATHESAR_DATABASES SECRET_KEY Creates two named Docker volumes static for storing static assets like CSS, js files media for storing user-uploaded media files Sets the container name as mathesar_service using the --name parameter, runs the container in a detached mode using the --detach parameter, and binds the port 8000 to the localhost . Refer to Docker documentation for additional configuration options. Verify if the Mathesar server is running successfully: docker logs -f mathesar_service Create a superuser docker exec -it mathesar_service python manage.py createsuperuser A prompt will appear to ask for the superuser details, fill in the details to create a superuser. At least one superuser is necessary for accessing Mathesar. See the Django docs for more information on the createsuperuser command","title":"Installation Steps"},{"location":"installation/docker/#upgrade","text":"Stop your existing Mathesar container: docker stop mathesar_service Remove the old Mathesar Image docker rm mathesar_service Bump the image version in the docker run command you usually use to run your Mathesar and start up a brand-new container: docker run \\ -d \\ --name mathesar_service \\ # YOUR STANDARD ARGS HERE mathesar/mathesar-prod:latest","title":"Upgrading Mathesar"},{"location":"installation/docker/#uninstall","text":"Remove the Mathesar container. docker rm -v mathesar_service Remove the Mathesar Image docker rmi mathesar_service Remove volumes related to Mathesar docker volume rm static && docker volume rm media Remove Mathesar internal schemas. If you\u2019d like to continue using your PostgreSQL database , you\u2019ll need to remove the schemas created for Mathesar\u2019s use during installation. You can remove them from the database as follows: Connect to the database. psql -h <DB HOSTNAME> -p <DB PORT> -U <DB_USER> <DB_NAME> Delete the types schema. DROP SCHEMA mathesar_types CASCADE ; Deleting this schema will also delete any database objects that depend on it. This should not be an issue if you don\u2019t have any data using Mathesar\u2019s custom data types. Delete the function schemas. DROP SCHEMA msar CASCADE ; DROP SCHEMA __msar CASCADE ;","title":"Uninstalling Mathesar"},{"location":"installation/docker-compose/","text":"Install Mathesar via Docker Compose \u00b6 Prerequisites \u00b6 Operating System \u00b6 You can install Mathesar using this method on Linux, MacOS, and Windows. Access \u00b6 You should have root access to the machine you\u2019re installing Mathesar on. Software \u00b6 You\u2019ll need to install the following software before you install Mathesar: Docker v23+ Docker Compose v2.10+ If you\u2019re installing on Windows: Ensure you have WSL installed Turn on Docker Desktop WSL 2, see Docker docs for more information Domain (optional) \u00b6 If you want Mathesar to be accessible over the internet, you\u2019ll probably want to set up a domain or sub-domain to use. If you don\u2019t need a domain, you can skip this section. Before you start installation, ensure that the DNS for your sub-domain or domain is pointing to the machine that you\u2019re installing Mathesar on . Database (optional) \u00b6 You can create a new PostgreSQL database while setting up Mathesar or use our UI to interact with an existing database. If you don\u2019t have a database you want to connect to, you can skip this section. To connect Mathesar to an existing database: The external database should be able to accept network connections from your Mathesar server. You\u2019ll need to set up a database user for Mathesar to use. The user should be a SUPERUSER , see PostgreSQL docs for more information . Have the following information handy before installation: Database hostname Database port Database name Database username Database password See Connect to an existing database for more details. Step-by-Step Guide \u00b6 Navigate to a directory where you\u2019d like to store your Mathesar configuration. We recommend /etc/mathesar , but it can be any directory. sudo mkdir -p /etc/mathesar cd /etc/mathesar Download our docker-compose.yml , and .env.example files to the directory you\u2019ve chosen. sudo wget https://github.com/centerofci/mathesar/raw/0.1.2/docker-compose.yml sudo wget https://github.com/centerofci/mathesar/raw/0.1.2/.env.example Rename .env.example to .env sudo mv .env.example .env Your custom .env file will be used for setting configuration variables . Set up the database To use the default database server bundled with Mathesar, no additional steps are necessary. The database service will start along with the Mathesar web server. Alternatively, you can disable the default database server if you plan on using an existing database server . Set up the web server. Edit your .env file, making the following changes: Add the Backend Configuration environment variables Customize the values of the environment variables to suit your needs. Example If you are using the default database container , your .env file should look something like this ALLOWED_HOSTS = '<your_domain_name>' SECRET_KEY = 'dee551f449ce300ee457d339dcee9682eb1d6f96b8f28feda5283aaa1a21' DJANGO_DATABASE_URL = 'postgresql://mathesar:mathesar@mathesar_db:5432/mathesar_django' MATHESAR_DATABASES = '(mathesar_tables|postgresql://mathesar:mathesar@mathesar_db:5432/mathesar)' Start the Mathesar web server. Linux MacOS sudo docker compose -f docker-compose.yml up service -d docker compose -f docker-compose.yml up service -d Set up the Caddy reverse proxy. Edit your .env file, adding the Caddy Reverse Proxy environment variables . Start the Caddy reverse proxy Linux MacOS sudo docker compose -f docker-compose.yml up caddy-reverse-proxy -d docker compose -f docker-compose.yml up caddy-reverse-proxy -d Create a superuser docker exec -it mathesar_service python manage.py createsuperuser A prompt will appear to ask for the superuser details. Fill in the details to create a superuser. At least one superuser is necessary for accessing Mathesar. See the Django docs for more information on the createsuperuser command (Optional) Start the upgrade server to enable upgrading the docker image using the Mathesar UI. Linux MacOS sudo docker compose -f docker-compose.yml up watchtower -d docker compose -f docker-compose.yml up watchtower -d Starting and stopping Mathesar \u00b6 The Mathesar server needs to be running for you to use Mathesar. If you restart your machine, you\u2019ll need to start the server again. Start Mathesar: Linux MacOS sudo docker compose -f /etc/mathesar/docker-compose.yml up -d docker compose -f /etc/mathesar/docker-compose.yml up -d Stop Mathesar: Linux MacOS sudo docker compose -f /etc/mathesar/docker-compose.yml down docker compose -f /etc/mathesar/docker-compose.yml down This stops all Mathesar Docker containers and releases their ports. Note If you customized the Mathesar configuration directory during installation, you\u2019ll need to change /etc/mathesar to your configuration directory. Upgrading Mathesar \u00b6 Upgrade from within Mathesar You can also run the upgrade from within Mathesar by logging in as an admin user and navigating to \u201cAdministration\u201d (in the top right menu) > \u201cSoftware Update\u201d Manually upgrade Mathesar to the newest version using Watchtower: Linux MacOS sudo docker exec mathesar-watchtower-1 /watchtower --run-once docker exec mathesar-watchtower-1 /watchtower --run-once Manually upgrade Mathesar to the newest version without using Watchtower: Linux MacOS sudo docker compose -f docker-compose.yml up --force-recreate --build service docker compose -f docker-compose.yml up --force-recreate --build service Uninstalling Mathesar \u00b6 Remove all Mathesar Docker images and containers. Linux MacOS sudo docker compose -f /etc/mathesar/docker-compose.yml down --rmi all -v docker compose -f /etc/mathesar/docker-compose.yml down --rmi all -v Remove configuration files. sudo rm -rf /etc/mathesar Note If you customized the Mathesar configuration directory during installation, you\u2019ll need to change /etc/mathesar to your configuration directory. Remove Mathesar internal schemas. If you\u2019d like to continue using your PostgreSQL database , you\u2019ll need to remove the schemas created for Mathesar\u2019s use during installation. You can remove them from the database as follows: Connect to the database. psql -h <DB HOSTNAME> -p <DB PORT> -U <DB_USER> <DB_NAME> Delete the types schema. DROP SCHEMA mathesar_types CASCADE ; Deleting this schema will also delete any database objects that depend on it. This should not be an issue if you don\u2019t have any data using Mathesar\u2019s custom data types. Delete the function schemas. DROP SCHEMA msar CASCADE ; DROP SCHEMA __msar CASCADE ;","title":"Install with Docker Compose"},{"location":"installation/docker-compose/#install-mathesar-via-docker-compose","text":"","title":"Install Mathesar via Docker Compose"},{"location":"installation/docker-compose/#prerequisites","text":"","title":"Prerequisites"},{"location":"installation/docker-compose/#operating-system","text":"You can install Mathesar using this method on Linux, MacOS, and Windows.","title":"Operating System"},{"location":"installation/docker-compose/#access","text":"You should have root access to the machine you\u2019re installing Mathesar on.","title":"Access"},{"location":"installation/docker-compose/#software","text":"You\u2019ll need to install the following software before you install Mathesar: Docker v23+ Docker Compose v2.10+ If you\u2019re installing on Windows: Ensure you have WSL installed Turn on Docker Desktop WSL 2, see Docker docs for more information","title":"Software"},{"location":"installation/docker-compose/#domain-optional","text":"If you want Mathesar to be accessible over the internet, you\u2019ll probably want to set up a domain or sub-domain to use. If you don\u2019t need a domain, you can skip this section. Before you start installation, ensure that the DNS for your sub-domain or domain is pointing to the machine that you\u2019re installing Mathesar on .","title":"Domain (optional)"},{"location":"installation/docker-compose/#database-optional","text":"You can create a new PostgreSQL database while setting up Mathesar or use our UI to interact with an existing database. If you don\u2019t have a database you want to connect to, you can skip this section. To connect Mathesar to an existing database: The external database should be able to accept network connections from your Mathesar server. You\u2019ll need to set up a database user for Mathesar to use. The user should be a SUPERUSER , see PostgreSQL docs for more information . Have the following information handy before installation: Database hostname Database port Database name Database username Database password See Connect to an existing database for more details.","title":"Database (optional)"},{"location":"installation/docker-compose/#steps","text":"Navigate to a directory where you\u2019d like to store your Mathesar configuration. We recommend /etc/mathesar , but it can be any directory. sudo mkdir -p /etc/mathesar cd /etc/mathesar Download our docker-compose.yml , and .env.example files to the directory you\u2019ve chosen. sudo wget https://github.com/centerofci/mathesar/raw/0.1.2/docker-compose.yml sudo wget https://github.com/centerofci/mathesar/raw/0.1.2/.env.example Rename .env.example to .env sudo mv .env.example .env Your custom .env file will be used for setting configuration variables . Set up the database To use the default database server bundled with Mathesar, no additional steps are necessary. The database service will start along with the Mathesar web server. Alternatively, you can disable the default database server if you plan on using an existing database server . Set up the web server. Edit your .env file, making the following changes: Add the Backend Configuration environment variables Customize the values of the environment variables to suit your needs. Example If you are using the default database container , your .env file should look something like this ALLOWED_HOSTS = '<your_domain_name>' SECRET_KEY = 'dee551f449ce300ee457d339dcee9682eb1d6f96b8f28feda5283aaa1a21' DJANGO_DATABASE_URL = 'postgresql://mathesar:mathesar@mathesar_db:5432/mathesar_django' MATHESAR_DATABASES = '(mathesar_tables|postgresql://mathesar:mathesar@mathesar_db:5432/mathesar)' Start the Mathesar web server. Linux MacOS sudo docker compose -f docker-compose.yml up service -d docker compose -f docker-compose.yml up service -d Set up the Caddy reverse proxy. Edit your .env file, adding the Caddy Reverse Proxy environment variables . Start the Caddy reverse proxy Linux MacOS sudo docker compose -f docker-compose.yml up caddy-reverse-proxy -d docker compose -f docker-compose.yml up caddy-reverse-proxy -d Create a superuser docker exec -it mathesar_service python manage.py createsuperuser A prompt will appear to ask for the superuser details. Fill in the details to create a superuser. At least one superuser is necessary for accessing Mathesar. See the Django docs for more information on the createsuperuser command (Optional) Start the upgrade server to enable upgrading the docker image using the Mathesar UI. Linux MacOS sudo docker compose -f docker-compose.yml up watchtower -d docker compose -f docker-compose.yml up watchtower -d","title":"Step-by-Step Guide"},{"location":"installation/docker-compose/#start-stop","text":"The Mathesar server needs to be running for you to use Mathesar. If you restart your machine, you\u2019ll need to start the server again. Start Mathesar: Linux MacOS sudo docker compose -f /etc/mathesar/docker-compose.yml up -d docker compose -f /etc/mathesar/docker-compose.yml up -d Stop Mathesar: Linux MacOS sudo docker compose -f /etc/mathesar/docker-compose.yml down docker compose -f /etc/mathesar/docker-compose.yml down This stops all Mathesar Docker containers and releases their ports. Note If you customized the Mathesar configuration directory during installation, you\u2019ll need to change /etc/mathesar to your configuration directory.","title":"Starting and stopping Mathesar"},{"location":"installation/docker-compose/#upgrade","text":"Upgrade from within Mathesar You can also run the upgrade from within Mathesar by logging in as an admin user and navigating to \u201cAdministration\u201d (in the top right menu) > \u201cSoftware Update\u201d Manually upgrade Mathesar to the newest version using Watchtower: Linux MacOS sudo docker exec mathesar-watchtower-1 /watchtower --run-once docker exec mathesar-watchtower-1 /watchtower --run-once Manually upgrade Mathesar to the newest version without using Watchtower: Linux MacOS sudo docker compose -f docker-compose.yml up --force-recreate --build service docker compose -f docker-compose.yml up --force-recreate --build service","title":"Upgrading Mathesar"},{"location":"installation/docker-compose/#uninstall","text":"Remove all Mathesar Docker images and containers. Linux MacOS sudo docker compose -f /etc/mathesar/docker-compose.yml down --rmi all -v docker compose -f /etc/mathesar/docker-compose.yml down --rmi all -v Remove configuration files. sudo rm -rf /etc/mathesar Note If you customized the Mathesar configuration directory during installation, you\u2019ll need to change /etc/mathesar to your configuration directory. Remove Mathesar internal schemas. If you\u2019d like to continue using your PostgreSQL database , you\u2019ll need to remove the schemas created for Mathesar\u2019s use during installation. You can remove them from the database as follows: Connect to the database. psql -h <DB HOSTNAME> -p <DB PORT> -U <DB_USER> <DB_NAME> Delete the types schema. DROP SCHEMA mathesar_types CASCADE ; Deleting this schema will also delete any database objects that depend on it. This should not be an issue if you don\u2019t have any data using Mathesar\u2019s custom data types. Delete the function schemas. DROP SCHEMA msar CASCADE ; DROP SCHEMA __msar CASCADE ;","title":"Uninstalling Mathesar"},{"location":"installation/guided-install/","text":"Guided installation \u00b6 Our install script guides you through a series of prompts to install Mathesar. The script sets up Mathesar using Docker Compose under the hood . Limitations This is a convenient way to install Mathesar. However, it\u2019s highly opinionated and requires sudo privileges (admin access), and only supports a limited set of configuration options. Use the Docker Compose installation option if you\u2019d like to customize your installation. Prerequisites \u00b6 Operating System \u00b6 You can install Mathesar using this method on Linux, MacOS, and Windows. Access \u00b6 You should have root access to the machine you\u2019re installing Mathesar on. Software \u00b6 You\u2019ll need to install the following software before you install Mathesar: Docker v23+ Docker Compose v2.10+ If you\u2019re installing on Windows: Ensure you have WSL installed Turn on Docker Desktop WSL 2, see Docker docs for more information Domain (optional) \u00b6 If you want Mathesar to be accessible over the internet, you\u2019ll probably want to set up a domain or sub-domain to use. If you don\u2019t need a domain, you can skip this section. Before you start installation, ensure that the DNS for your sub-domain or domain is pointing to the machine that you\u2019re installing Mathesar on . Database (optional) \u00b6 You can create a new PostgreSQL database while setting up Mathesar or use our UI to interact with an existing database. If you don\u2019t have a database you want to connect to, you can skip this section. To connect Mathesar to an existing database: The external database should be able to accept network connections from your Mathesar server. You\u2019ll need to set up a database user for Mathesar to use. The user should be a SUPERUSER , see PostgreSQL docs for more information . Have the following information handy before installation: Database hostname Database port Database name Database username Database password See Connect to an existing database for more details. Overview \u00b6 The installation script will set up: A Postgres database server to store data A web server to run the Mathesar application A reverse proxy server to serve static files and set up SSL certificates An upgrade server to handle upgrading Mathesar via the web interface If you\u2019d like to know the steps performed by the install script in more detail, you can read our Guided installation: under the hood document. Step-by-step guide \u00b6 Getting help If you run into any problems during installation, see our troubleshooting guide or open a ticket describing your problem . Paste this command into your terminal to begin installing the latest version of Mathesar: bash < ( curl -sfSL https://raw.githubusercontent.com/centerofci/mathesar/0.1.2/install.sh ) Follow the interactive prompts to configure your Mathesar installation. When finished, the installer will display the URL where you can run Mathesar from your web browser. Connecting to additional databases Once you have successfully installed Mathesar, if you wish to connect an additional database to Mathesar, instructions are here . Starting and stopping Mathesar \u00b6 The Mathesar server needs to be running for you to use Mathesar. If you restart your machine, you\u2019ll need to start the server again. Start Mathesar: Linux MacOS sudo docker compose -f /etc/mathesar/docker-compose.yml up -d docker compose -f /etc/mathesar/docker-compose.yml up -d Stop Mathesar: Linux MacOS sudo docker compose -f /etc/mathesar/docker-compose.yml down docker compose -f /etc/mathesar/docker-compose.yml down This stops all Mathesar Docker containers and releases their ports. Note If you customized the Mathesar configuration directory during installation, you\u2019ll need to change /etc/mathesar to your configuration directory. Upgrading Mathesar \u00b6 Upgrade from within Mathesar You can also run the upgrade from within Mathesar by logging in as an admin user and navigating to \u201cAdministration\u201d (in the top right menu) > \u201cSoftware Update\u201d Manually upgrade Mathesar to the newest version using Watchtower: Linux MacOS sudo docker exec mathesar-watchtower-1 /watchtower --run-once docker exec mathesar-watchtower-1 /watchtower --run-once Manually upgrade Mathesar to the newest version without using Watchtower: Linux MacOS sudo docker compose -f docker-compose.yml up --force-recreate --build service docker compose -f docker-compose.yml up --force-recreate --build service Uninstalling Mathesar \u00b6 Remove all Mathesar Docker images and containers. Linux MacOS sudo docker compose -f /etc/mathesar/docker-compose.yml down --rmi all -v docker compose -f /etc/mathesar/docker-compose.yml down --rmi all -v Remove configuration files. sudo rm -rf /etc/mathesar Note If you customized the Mathesar configuration directory during installation, you\u2019ll need to change /etc/mathesar to your configuration directory. Remove Mathesar internal schemas. If you\u2019d like to continue using your PostgreSQL database , you\u2019ll need to remove the schemas created for Mathesar\u2019s use during installation. You can remove them from the database as follows: Connect to the database. psql -h <DB HOSTNAME> -p <DB PORT> -U <DB_USER> <DB_NAME> Delete the types schema. DROP SCHEMA mathesar_types CASCADE ; Deleting this schema will also delete any database objects that depend on it. This should not be an issue if you don\u2019t have any data using Mathesar\u2019s custom data types. Delete the function schemas. DROP SCHEMA msar CASCADE ; DROP SCHEMA __msar CASCADE ;","title":"Install with guided script"},{"location":"installation/guided-install/#guided-installation","text":"Our install script guides you through a series of prompts to install Mathesar. The script sets up Mathesar using Docker Compose under the hood . Limitations This is a convenient way to install Mathesar. However, it\u2019s highly opinionated and requires sudo privileges (admin access), and only supports a limited set of configuration options. Use the Docker Compose installation option if you\u2019d like to customize your installation.","title":"Guided installation"},{"location":"installation/guided-install/#prerequisites","text":"","title":"Prerequisites"},{"location":"installation/guided-install/#operating-system","text":"You can install Mathesar using this method on Linux, MacOS, and Windows.","title":"Operating System"},{"location":"installation/guided-install/#access","text":"You should have root access to the machine you\u2019re installing Mathesar on.","title":"Access"},{"location":"installation/guided-install/#software","text":"You\u2019ll need to install the following software before you install Mathesar: Docker v23+ Docker Compose v2.10+ If you\u2019re installing on Windows: Ensure you have WSL installed Turn on Docker Desktop WSL 2, see Docker docs for more information","title":"Software"},{"location":"installation/guided-install/#domain-optional","text":"If you want Mathesar to be accessible over the internet, you\u2019ll probably want to set up a domain or sub-domain to use. If you don\u2019t need a domain, you can skip this section. Before you start installation, ensure that the DNS for your sub-domain or domain is pointing to the machine that you\u2019re installing Mathesar on .","title":"Domain (optional)"},{"location":"installation/guided-install/#database-optional","text":"You can create a new PostgreSQL database while setting up Mathesar or use our UI to interact with an existing database. If you don\u2019t have a database you want to connect to, you can skip this section. To connect Mathesar to an existing database: The external database should be able to accept network connections from your Mathesar server. You\u2019ll need to set up a database user for Mathesar to use. The user should be a SUPERUSER , see PostgreSQL docs for more information . Have the following information handy before installation: Database hostname Database port Database name Database username Database password See Connect to an existing database for more details.","title":"Database (optional)"},{"location":"installation/guided-install/#overview","text":"The installation script will set up: A Postgres database server to store data A web server to run the Mathesar application A reverse proxy server to serve static files and set up SSL certificates An upgrade server to handle upgrading Mathesar via the web interface If you\u2019d like to know the steps performed by the install script in more detail, you can read our Guided installation: under the hood document.","title":"Overview"},{"location":"installation/guided-install/#steps","text":"Getting help If you run into any problems during installation, see our troubleshooting guide or open a ticket describing your problem . Paste this command into your terminal to begin installing the latest version of Mathesar: bash < ( curl -sfSL https://raw.githubusercontent.com/centerofci/mathesar/0.1.2/install.sh ) Follow the interactive prompts to configure your Mathesar installation. When finished, the installer will display the URL where you can run Mathesar from your web browser. Connecting to additional databases Once you have successfully installed Mathesar, if you wish to connect an additional database to Mathesar, instructions are here .","title":"Step-by-step guide"},{"location":"installation/guided-install/#start-stop","text":"The Mathesar server needs to be running for you to use Mathesar. If you restart your machine, you\u2019ll need to start the server again. Start Mathesar: Linux MacOS sudo docker compose -f /etc/mathesar/docker-compose.yml up -d docker compose -f /etc/mathesar/docker-compose.yml up -d Stop Mathesar: Linux MacOS sudo docker compose -f /etc/mathesar/docker-compose.yml down docker compose -f /etc/mathesar/docker-compose.yml down This stops all Mathesar Docker containers and releases their ports. Note If you customized the Mathesar configuration directory during installation, you\u2019ll need to change /etc/mathesar to your configuration directory.","title":"Starting and stopping Mathesar"},{"location":"installation/guided-install/#upgrade","text":"Upgrade from within Mathesar You can also run the upgrade from within Mathesar by logging in as an admin user and navigating to \u201cAdministration\u201d (in the top right menu) > \u201cSoftware Update\u201d Manually upgrade Mathesar to the newest version using Watchtower: Linux MacOS sudo docker exec mathesar-watchtower-1 /watchtower --run-once docker exec mathesar-watchtower-1 /watchtower --run-once Manually upgrade Mathesar to the newest version without using Watchtower: Linux MacOS sudo docker compose -f docker-compose.yml up --force-recreate --build service docker compose -f docker-compose.yml up --force-recreate --build service","title":"Upgrading Mathesar"},{"location":"installation/guided-install/#uninstall","text":"Remove all Mathesar Docker images and containers. Linux MacOS sudo docker compose -f /etc/mathesar/docker-compose.yml down --rmi all -v docker compose -f /etc/mathesar/docker-compose.yml down --rmi all -v Remove configuration files. sudo rm -rf /etc/mathesar Note If you customized the Mathesar configuration directory during installation, you\u2019ll need to change /etc/mathesar to your configuration directory. Remove Mathesar internal schemas. If you\u2019d like to continue using your PostgreSQL database , you\u2019ll need to remove the schemas created for Mathesar\u2019s use during installation. You can remove them from the database as follows: Connect to the database. psql -h <DB HOSTNAME> -p <DB PORT> -U <DB_USER> <DB_NAME> Delete the types schema. DROP SCHEMA mathesar_types CASCADE ; Deleting this schema will also delete any database objects that depend on it. This should not be an issue if you don\u2019t have any data using Mathesar\u2019s custom data types. Delete the function schemas. DROP SCHEMA msar CASCADE ; DROP SCHEMA __msar CASCADE ;","title":"Uninstalling Mathesar"},{"location":"installation/guided-install/troubleshooting/","text":"Guided installation: troubleshooting \u00b6 This document is related to our guided installation . Restarting installation \u00b6 If something has gone wrong with the installation, you may need to restart the script. Two cases are possible: The script has started the Docker environment for Mathesar. You can tell this happened if your terminal printed the message Next, we'll download files and start the server, This may take a few minutes. Press ENTER to continue. and you subsequently pressed ENTER . In this case, you must run the command Linux MacOS sudo docker compose -f /etc/mathesar/docker-compose.yml down -v docker compose -f /etc/mathesar/docker-compose.yml down -v and then run the installation script again. The script hasn\u2019t yet started the Docker environment, i.e., you haven\u2019t seen the message printed above. In this case, you need only stop the script by pressing CTRL+C , and then run it again. When installing on Windows \u00b6 Warning The process of installing and running has thus far been much better tested on MacOS and Linux than it has on Windows. Please open issues for any Windows-specific problems you encounter. During installation, choose \u201cWSL 2\u201d instead of \u201cHyper-V\u201d. WSL is the Windows Sub System for Linux and is required to run Mathesar. See this tutorial for hints if you\u2019re having trouble getting Docker wired up properly. Make sure you\u2019re use the WSL command prompt (rather than DOS or PowerShell) when running the installation script and other commands. Docker versions \u00b6 The most common problem we\u2019ve encountered is users with out-of-date docker or docker-compose versions. To determine your docker-compose version, run docker compose version . (Note the lack of hyphen.) You need docker-compose version 2.7 or higher for the installation to succeed. Better if it\u2019s version 2.10 or higher. To determine your docker version, run docker --version . We\u2019ve tested with docker version 23, but lower versions may work. If you run docker-compose --version and see a relatively old version, try docker compose version and see whether it\u2019s different. The latter is the version that will be used in the script. Ports \u00b6 You may see errors about various ports being unavailable (or already being bound). In this case, uninstall Mathesar to restart from a clean docker state, and choose non-default ports during the installation process for PostgreSQL, HTTP traffic, or HTTPS traffic as appropriate, e.g., using 8080 for HTTP traffic if 80 is unavailable. Note that if you customized the configuration directory, you must replace /etc/mathesar with that custom directory in the command. Connection problems \u00b6 In order for Mathesar to install properly, it needs to download some artifacts from https://raw.githubusercontent.com . We\u2019ve received some reports that this domain is blocked for some internet providers in India. If this is the case for you, consider routing around that problem via a custom DNS server, or using a VPN. Permissions \u00b6 If you have permissions issues when the script begins running docker commands, double-check that your user is in the sudoers file. Try running sudo -v . If that gives an error, your user lacks needed permissions and you should speak with the administrator of your system. Getting more help \u00b6 If you\u2019re having an issue not covered by this documentation, open an issue on GitHub .","title":"Troubleshooting"},{"location":"installation/guided-install/troubleshooting/#guided-installation-troubleshooting","text":"This document is related to our guided installation .","title":"Guided installation: troubleshooting"},{"location":"installation/guided-install/troubleshooting/#restarting-installation","text":"If something has gone wrong with the installation, you may need to restart the script. Two cases are possible: The script has started the Docker environment for Mathesar. You can tell this happened if your terminal printed the message Next, we'll download files and start the server, This may take a few minutes. Press ENTER to continue. and you subsequently pressed ENTER . In this case, you must run the command Linux MacOS sudo docker compose -f /etc/mathesar/docker-compose.yml down -v docker compose -f /etc/mathesar/docker-compose.yml down -v and then run the installation script again. The script hasn\u2019t yet started the Docker environment, i.e., you haven\u2019t seen the message printed above. In this case, you need only stop the script by pressing CTRL+C , and then run it again.","title":"Restarting installation"},{"location":"installation/guided-install/troubleshooting/#windows","text":"Warning The process of installing and running has thus far been much better tested on MacOS and Linux than it has on Windows. Please open issues for any Windows-specific problems you encounter. During installation, choose \u201cWSL 2\u201d instead of \u201cHyper-V\u201d. WSL is the Windows Sub System for Linux and is required to run Mathesar. See this tutorial for hints if you\u2019re having trouble getting Docker wired up properly. Make sure you\u2019re use the WSL command prompt (rather than DOS or PowerShell) when running the installation script and other commands.","title":"When installing on Windows"},{"location":"installation/guided-install/troubleshooting/#docker-versions","text":"The most common problem we\u2019ve encountered is users with out-of-date docker or docker-compose versions. To determine your docker-compose version, run docker compose version . (Note the lack of hyphen.) You need docker-compose version 2.7 or higher for the installation to succeed. Better if it\u2019s version 2.10 or higher. To determine your docker version, run docker --version . We\u2019ve tested with docker version 23, but lower versions may work. If you run docker-compose --version and see a relatively old version, try docker compose version and see whether it\u2019s different. The latter is the version that will be used in the script.","title":"Docker versions"},{"location":"installation/guided-install/troubleshooting/#ports","text":"You may see errors about various ports being unavailable (or already being bound). In this case, uninstall Mathesar to restart from a clean docker state, and choose non-default ports during the installation process for PostgreSQL, HTTP traffic, or HTTPS traffic as appropriate, e.g., using 8080 for HTTP traffic if 80 is unavailable. Note that if you customized the configuration directory, you must replace /etc/mathesar with that custom directory in the command.","title":"Ports"},{"location":"installation/guided-install/troubleshooting/#connection-problems","text":"In order for Mathesar to install properly, it needs to download some artifacts from https://raw.githubusercontent.com . We\u2019ve received some reports that this domain is blocked for some internet providers in India. If this is the case for you, consider routing around that problem via a custom DNS server, or using a VPN.","title":"Connection problems"},{"location":"installation/guided-install/troubleshooting/#permissions","text":"If you have permissions issues when the script begins running docker commands, double-check that your user is in the sudoers file. Try running sudo -v . If that gives an error, your user lacks needed permissions and you should speak with the administrator of your system.","title":"Permissions"},{"location":"installation/guided-install/troubleshooting/#getting-more-help","text":"If you\u2019re having an issue not covered by this documentation, open an issue on GitHub .","title":"Getting more help"},{"location":"installation/guided-install/under-the-hood/","text":"Guided installation: under the hood \u00b6 This document is related to our guided installation . What does the script do? \u00b6 Our guided installation script performs the following steps. Operating system check \u00b6 The installer attempts to determine what operating system you\u2019re installing Mathesar on. We\u2019ve tested with some variants of macOS as well as a few distros of Linux. Some logic in the installer branches based on your operating system. Docker version check \u00b6 The installer double-checks your Docker and Docker Compose versions, making sure that docker is at least version 20.0.0, and docker-compose is at least version 2.10.0. Database configuration \u00b6 Mathesar uses two PostgreSQL databases: an internal database , used to store Mathesar related metadata such as display options. This is set up on the same machine as Mathesar\u2019s deployment. the user database , which stores your data. You can either set up a new database from scratch for this purpose or connect an existing PostgreSQL database. If you\u2019re setting a database up from scratch, the installer will set up credentials for both databases (a username and password), and also lets you customize the name of your user database. If you\u2019re connecting an existing database, you\u2019ll enter pre-existing credentials for the user database and set up new credentials for the Mathesar internal database. The credentials created in this section are used to log in directly to the database (i.e., not the Mathesar UI). You\u2019ll set up login credentials for the UI in a later step. Finally, Mathesar helps you customize the port exposed to your host machine from the database container. This is useful, since you\u2019ll need to have an exposed port to login to the Mathesar database(s) using an alternate client such as psql , but there could be a conflict on the default port (e.g. for the case that a PostgreSQL instance is running in the host OS). Webserver configuration \u00b6 This section lets you configure the entrypoint (Caddy) for every request you send to Mathesar. You may need to customize the ports if you have other services using ports on your machine. Additionally, you need to configure either a domain or an external IP address if you plan to expose your installation of Mathesar to the internet. Setting up the domain also gets HTTPS working properly on your Mathesar installation. Domain setup \u00b6 The domain specified here should be a valid, registered domain, whose DNS entry points to the IP address of the server on which Mathesar is installed. DNS configuration should be done ahead of time. If you don\u2019t use a domain, Mathesar can still be accessed from the internet using an IP address instead a domain name. Please note that HTTPS will not work without a domain name set up. Admin user configuration \u00b6 Here, the installer helps you create a user (separate from the database user) that you will use to login to Mathesar through the main web UI. This section walks you through that process to create a username and password for that user. You\u2019re allowed to use the same details as the database user above, but it\u2019s not required, or particularly recommended. The user created in this section will have admin privileges in Mathesar, and be able to create other users after the installation is complete. Configuration directory \u00b6 We need to store all the details configured above, and we do so in a file in your configuration directory. Note that this contains your passwords and other secrets, so it should be kept secure . By default, this directory is /etc/mathesar/ , but you can change it. We\u2019ll store two files under that directory: .env : This file has the above-mentioned configurations. docker-compose.yml This is a config file downloaded from Mathesar\u2019s git repo. It defines the different Docker containers used by Mathesar, and how they\u2019re networked together. Recommended permissions for the .env file are: -rw------- 1 root root 449 Feb 22 13:39 /etc/mathesar/.env Docker setup \u00b6 The installer downloads the docker-compose.yml file from Mathesar\u2019s repo. The installer pulls all Docker images needed for Mathesar to run properly, and starts the various services in sequence. Final steps \u00b6 If everything has worked, then the installer prints a message letting you know that it\u2019s succeeded, and gives a little information about where you should go to login to Mathesar. Docker containers created \u00b6 This installation process creates the following containers: mathesar_service , which runs the main Mathesar application. mathesar_db , which runs the database (PostgreSQL 13). mathesar-caddy-reverse-proxy-1 , which helps route traffic to the mathesar_service container. mathesar-watchtower-1 , which helps upgrade Mathesar installation when new releases are available. Files involved \u00b6 This installation process creates the following files in the Mathesar configuration directory: .env . This file defines the environment inside of the various Mathesar docker containers. It should be kept safe, since it has sensitive information about the passwords you set for Mathesar. If you\u2019ve forgotten your admin username or password, look at this file. docker-compose.yml . This is the main file defining the Mathesar containers listed above, and the connections between them.","title":"Under the hood"},{"location":"installation/guided-install/under-the-hood/#guided-installation-under-the-hood","text":"This document is related to our guided installation .","title":"Guided installation: under the hood"},{"location":"installation/guided-install/under-the-hood/#what-does-the-script-do","text":"Our guided installation script performs the following steps.","title":"What does the script do?"},{"location":"installation/guided-install/under-the-hood/#operating-system-check","text":"The installer attempts to determine what operating system you\u2019re installing Mathesar on. We\u2019ve tested with some variants of macOS as well as a few distros of Linux. Some logic in the installer branches based on your operating system.","title":"Operating system check"},{"location":"installation/guided-install/under-the-hood/#docker-version-check","text":"The installer double-checks your Docker and Docker Compose versions, making sure that docker is at least version 20.0.0, and docker-compose is at least version 2.10.0.","title":"Docker version check"},{"location":"installation/guided-install/under-the-hood/#database-configuration","text":"Mathesar uses two PostgreSQL databases: an internal database , used to store Mathesar related metadata such as display options. This is set up on the same machine as Mathesar\u2019s deployment. the user database , which stores your data. You can either set up a new database from scratch for this purpose or connect an existing PostgreSQL database. If you\u2019re setting a database up from scratch, the installer will set up credentials for both databases (a username and password), and also lets you customize the name of your user database. If you\u2019re connecting an existing database, you\u2019ll enter pre-existing credentials for the user database and set up new credentials for the Mathesar internal database. The credentials created in this section are used to log in directly to the database (i.e., not the Mathesar UI). You\u2019ll set up login credentials for the UI in a later step. Finally, Mathesar helps you customize the port exposed to your host machine from the database container. This is useful, since you\u2019ll need to have an exposed port to login to the Mathesar database(s) using an alternate client such as psql , but there could be a conflict on the default port (e.g. for the case that a PostgreSQL instance is running in the host OS).","title":"Database configuration"},{"location":"installation/guided-install/under-the-hood/#webserver-configuration","text":"This section lets you configure the entrypoint (Caddy) for every request you send to Mathesar. You may need to customize the ports if you have other services using ports on your machine. Additionally, you need to configure either a domain or an external IP address if you plan to expose your installation of Mathesar to the internet. Setting up the domain also gets HTTPS working properly on your Mathesar installation.","title":"Webserver configuration"},{"location":"installation/guided-install/under-the-hood/#domain-setup","text":"The domain specified here should be a valid, registered domain, whose DNS entry points to the IP address of the server on which Mathesar is installed. DNS configuration should be done ahead of time. If you don\u2019t use a domain, Mathesar can still be accessed from the internet using an IP address instead a domain name. Please note that HTTPS will not work without a domain name set up.","title":"Domain setup"},{"location":"installation/guided-install/under-the-hood/#admin-user-configuration","text":"Here, the installer helps you create a user (separate from the database user) that you will use to login to Mathesar through the main web UI. This section walks you through that process to create a username and password for that user. You\u2019re allowed to use the same details as the database user above, but it\u2019s not required, or particularly recommended. The user created in this section will have admin privileges in Mathesar, and be able to create other users after the installation is complete.","title":"Admin user configuration"},{"location":"installation/guided-install/under-the-hood/#configuration-directory","text":"We need to store all the details configured above, and we do so in a file in your configuration directory. Note that this contains your passwords and other secrets, so it should be kept secure . By default, this directory is /etc/mathesar/ , but you can change it. We\u2019ll store two files under that directory: .env : This file has the above-mentioned configurations. docker-compose.yml This is a config file downloaded from Mathesar\u2019s git repo. It defines the different Docker containers used by Mathesar, and how they\u2019re networked together. Recommended permissions for the .env file are: -rw------- 1 root root 449 Feb 22 13:39 /etc/mathesar/.env","title":"Configuration directory"},{"location":"installation/guided-install/under-the-hood/#docker-setup","text":"The installer downloads the docker-compose.yml file from Mathesar\u2019s repo. The installer pulls all Docker images needed for Mathesar to run properly, and starts the various services in sequence.","title":"Docker setup"},{"location":"installation/guided-install/under-the-hood/#final-steps","text":"If everything has worked, then the installer prints a message letting you know that it\u2019s succeeded, and gives a little information about where you should go to login to Mathesar.","title":"Final steps"},{"location":"installation/guided-install/under-the-hood/#docker-containers-created","text":"This installation process creates the following containers: mathesar_service , which runs the main Mathesar application. mathesar_db , which runs the database (PostgreSQL 13). mathesar-caddy-reverse-proxy-1 , which helps route traffic to the mathesar_service container. mathesar-watchtower-1 , which helps upgrade Mathesar installation when new releases are available.","title":"Docker containers created"},{"location":"installation/guided-install/under-the-hood/#files-involved","text":"This installation process creates the following files in the Mathesar configuration directory: .env . This file defines the environment inside of the various Mathesar docker containers. It should be kept safe, since it has sensitive information about the passwords you set for Mathesar. If you\u2019ve forgotten your admin username or password, look at this file. docker-compose.yml . This is the main file defining the Mathesar containers listed above, and the connections between them.","title":"Files involved"},{"location":"snippets/docker-compose-administration/","text":"Starting and stopping Mathesar \u00b6 The Mathesar server needs to be running for you to use Mathesar. If you restart your machine, you\u2019ll need to start the server again. Start Mathesar: Linux MacOS sudo docker compose -f /etc/mathesar/docker-compose.yml up -d docker compose -f /etc/mathesar/docker-compose.yml up -d Stop Mathesar: Linux MacOS sudo docker compose -f /etc/mathesar/docker-compose.yml down docker compose -f /etc/mathesar/docker-compose.yml down This stops all Mathesar Docker containers and releases their ports. Note If you customized the Mathesar configuration directory during installation, you\u2019ll need to change /etc/mathesar to your configuration directory. Upgrading Mathesar \u00b6 Upgrade from within Mathesar You can also run the upgrade from within Mathesar by logging in as an admin user and navigating to \u201cAdministration\u201d (in the top right menu) > \u201cSoftware Update\u201d Manually upgrade Mathesar to the newest version using Watchtower: Linux MacOS sudo docker exec mathesar-watchtower-1 /watchtower --run-once docker exec mathesar-watchtower-1 /watchtower --run-once Manually upgrade Mathesar to the newest version without using Watchtower: Linux MacOS sudo docker compose -f docker-compose.yml up --force-recreate --build service docker compose -f docker-compose.yml up --force-recreate --build service Uninstalling Mathesar \u00b6 Remove all Mathesar Docker images and containers. Linux MacOS sudo docker compose -f /etc/mathesar/docker-compose.yml down --rmi all -v docker compose -f /etc/mathesar/docker-compose.yml down --rmi all -v Remove configuration files. sudo rm -rf /etc/mathesar Note If you customized the Mathesar configuration directory during installation, you\u2019ll need to change /etc/mathesar to your configuration directory. Remove Mathesar internal schemas. If you\u2019d like to continue using your PostgreSQL database , you\u2019ll need to remove the schemas created for Mathesar\u2019s use during installation. You can remove them from the database as follows: Connect to the database. psql -h <DB HOSTNAME> -p <DB PORT> -U <DB_USER> <DB_NAME> Delete the types schema. DROP SCHEMA mathesar_types CASCADE ; Deleting this schema will also delete any database objects that depend on it. This should not be an issue if you don\u2019t have any data using Mathesar\u2019s custom data types. Delete the function schemas. DROP SCHEMA msar CASCADE ; DROP SCHEMA __msar CASCADE ;","title":"Docker compose administration"},{"location":"snippets/docker-compose-administration/#start-stop","text":"The Mathesar server needs to be running for you to use Mathesar. If you restart your machine, you\u2019ll need to start the server again. Start Mathesar: Linux MacOS sudo docker compose -f /etc/mathesar/docker-compose.yml up -d docker compose -f /etc/mathesar/docker-compose.yml up -d Stop Mathesar: Linux MacOS sudo docker compose -f /etc/mathesar/docker-compose.yml down docker compose -f /etc/mathesar/docker-compose.yml down This stops all Mathesar Docker containers and releases their ports. Note If you customized the Mathesar configuration directory during installation, you\u2019ll need to change /etc/mathesar to your configuration directory.","title":"Starting and stopping Mathesar"},{"location":"snippets/docker-compose-administration/#upgrade","text":"Upgrade from within Mathesar You can also run the upgrade from within Mathesar by logging in as an admin user and navigating to \u201cAdministration\u201d (in the top right menu) > \u201cSoftware Update\u201d Manually upgrade Mathesar to the newest version using Watchtower: Linux MacOS sudo docker exec mathesar-watchtower-1 /watchtower --run-once docker exec mathesar-watchtower-1 /watchtower --run-once Manually upgrade Mathesar to the newest version without using Watchtower: Linux MacOS sudo docker compose -f docker-compose.yml up --force-recreate --build service docker compose -f docker-compose.yml up --force-recreate --build service","title":"Upgrading Mathesar"},{"location":"snippets/docker-compose-administration/#uninstall","text":"Remove all Mathesar Docker images and containers. Linux MacOS sudo docker compose -f /etc/mathesar/docker-compose.yml down --rmi all -v docker compose -f /etc/mathesar/docker-compose.yml down --rmi all -v Remove configuration files. sudo rm -rf /etc/mathesar Note If you customized the Mathesar configuration directory during installation, you\u2019ll need to change /etc/mathesar to your configuration directory. Remove Mathesar internal schemas. If you\u2019d like to continue using your PostgreSQL database , you\u2019ll need to remove the schemas created for Mathesar\u2019s use during installation. You can remove them from the database as follows: Connect to the database. psql -h <DB HOSTNAME> -p <DB PORT> -U <DB_USER> <DB_NAME> Delete the types schema. DROP SCHEMA mathesar_types CASCADE ; Deleting this schema will also delete any database objects that depend on it. This should not be an issue if you don\u2019t have any data using Mathesar\u2019s custom data types. Delete the function schemas. DROP SCHEMA msar CASCADE ; DROP SCHEMA __msar CASCADE ;","title":"Uninstalling Mathesar"},{"location":"snippets/docker-compose-prerequisites/","text":"Operating System \u00b6 You can install Mathesar using this method on Linux, MacOS, and Windows. Access \u00b6 You should have root access to the machine you\u2019re installing Mathesar on. Software \u00b6 You\u2019ll need to install the following software before you install Mathesar: Docker v23+ Docker Compose v2.10+ If you\u2019re installing on Windows: Ensure you have WSL installed Turn on Docker Desktop WSL 2, see Docker docs for more information Domain (optional) \u00b6 If you want Mathesar to be accessible over the internet, you\u2019ll probably want to set up a domain or sub-domain to use. If you don\u2019t need a domain, you can skip this section. Before you start installation, ensure that the DNS for your sub-domain or domain is pointing to the machine that you\u2019re installing Mathesar on . Database (optional) \u00b6 You can create a new PostgreSQL database while setting up Mathesar or use our UI to interact with an existing database. If you don\u2019t have a database you want to connect to, you can skip this section. To connect Mathesar to an existing database: The external database should be able to accept network connections from your Mathesar server. You\u2019ll need to set up a database user for Mathesar to use. The user should be a SUPERUSER , see PostgreSQL docs for more information . Have the following information handy before installation: Database hostname Database port Database name Database username Database password See Connect to an existing database for more details.","title":"Docker compose prerequisites"},{"location":"snippets/docker-compose-prerequisites/#operating-system","text":"You can install Mathesar using this method on Linux, MacOS, and Windows.","title":"Operating System"},{"location":"snippets/docker-compose-prerequisites/#access","text":"You should have root access to the machine you\u2019re installing Mathesar on.","title":"Access"},{"location":"snippets/docker-compose-prerequisites/#software","text":"You\u2019ll need to install the following software before you install Mathesar: Docker v23+ Docker Compose v2.10+ If you\u2019re installing on Windows: Ensure you have WSL installed Turn on Docker Desktop WSL 2, see Docker docs for more information","title":"Software"},{"location":"snippets/docker-compose-prerequisites/#domain-optional","text":"If you want Mathesar to be accessible over the internet, you\u2019ll probably want to set up a domain or sub-domain to use. If you don\u2019t need a domain, you can skip this section. Before you start installation, ensure that the DNS for your sub-domain or domain is pointing to the machine that you\u2019re installing Mathesar on .","title":"Domain (optional)"},{"location":"snippets/docker-compose-prerequisites/#database-optional","text":"You can create a new PostgreSQL database while setting up Mathesar or use our UI to interact with an existing database. If you don\u2019t have a database you want to connect to, you can skip this section. To connect Mathesar to an existing database: The external database should be able to accept network connections from your Mathesar server. You\u2019ll need to set up a database user for Mathesar to use. The user should be a SUPERUSER , see PostgreSQL docs for more information . Have the following information handy before installation: Database hostname Database port Database name Database username Database password See Connect to an existing database for more details.","title":"Database (optional)"},{"location":"snippets/uninstall-schemas/","text":"Remove Mathesar internal schemas. If you\u2019d like to continue using your PostgreSQL database , you\u2019ll need to remove the schemas created for Mathesar\u2019s use during installation. You can remove them from the database as follows: Connect to the database. psql -h <DB HOSTNAME> -p <DB PORT> -U <DB_USER> <DB_NAME> Delete the types schema. DROP SCHEMA mathesar_types CASCADE ; Deleting this schema will also delete any database objects that depend on it. This should not be an issue if you don\u2019t have any data using Mathesar\u2019s custom data types. Delete the function schemas. DROP SCHEMA msar CASCADE ; DROP SCHEMA __msar CASCADE ;","title":"Uninstall schemas"},{"location":"user-guide/","text":"Using Mathesar \u00b6 Welcome! At this point, we assume you\u2019ve installed Mathesar successfully and have logged into the web UI. If you\u2019ve connected Mathesar to an existing database, you should see all your schemas once you log in, and you can work with them as you please. If you\u2019re starting from scratch, we recommend creating a new schema .","title":"Introduction"},{"location":"user-guide/#using-mathesar","text":"Welcome! At this point, we assume you\u2019ve installed Mathesar successfully and have logged into the web UI. If you\u2019ve connected Mathesar to an existing database, you should see all your schemas once you log in, and you can work with them as you please. If you\u2019re starting from scratch, we recommend creating a new schema .","title":"Using Mathesar"},{"location":"user-guide/syncing-db/","text":"Syncing Database Changes \u00b6 Mathesar is designed to be used in tandem with other database tools. This means that if you make changes to your database structure or data outside of Mathesar, those changes will be reflected in Mathesar\u2019s UI. If you make structural changes to the database outside Mathesar (e.g. using another tool to add a schema, table, or column), those changes will not be reflected in Mathesar until you manually sync them. You can sync them using the \u201cSync Database Changes\u201d button in the database homepage. External changes to data (e.g. adding, editing, or deleting records ) will be automatically reflected without clicking this button.","title":"Syncing database changes"},{"location":"user-guide/syncing-db/#syncing-database-changes","text":"Mathesar is designed to be used in tandem with other database tools. This means that if you make changes to your database structure or data outside of Mathesar, those changes will be reflected in Mathesar\u2019s UI. If you make structural changes to the database outside Mathesar (e.g. using another tool to add a schema, table, or column), those changes will not be reflected in Mathesar until you manually sync them. You can sync them using the \u201cSync Database Changes\u201d button in the database homepage. External changes to data (e.g. adding, editing, or deleting records ) will be automatically reflected without clicking this button.","title":"Syncing Database Changes"},{"location":"user-guide/users/","text":"Users & Access Levels \u00b6 Mathesar allows you to set up users with different access levels. A user\u2019s access levels determine what they can do with the data managed in Mathesar. Mathesar\u2019s installation process includes setting up the first user. This user is an Admin . Managing Users \u00b6 Click on the gear icon on the top right of the application and select Administration . In the left sidebar, click on Users . Note Only Admins can add new users. Mathesar does not send invitation emails to new users (yet). You\u2019ll need to send the user their username and password yourself. The user will be prompted to change the password when they log in for the first time. User Types \u00b6 Users can be either Admin or Standard users. Admin users \u00b6 Admin users: can manage other users (view, add, edit, delete) have Manager permissions on all databases and schemas You cannot set granular permissions for an Admin user. Standard users \u00b6 By default, Standard users cannot see anything in Mathesar. They will need to be granted database or schema roles individually. Database Roles \u00b6 There are three levels of database roles: Managers own the database. They can edit all data in the database, as well as edit the structure of data (e.g. create tables, add and remove columns, etc.). They also manage access to the database. Editors can edit all data in the database, but cannot change the underlying data structures or manage access. Viewers have read-only access to all data in the database. They cannot make any changes. Manager \u00b6 Receives Manager permissions on all schemas in the database. Can view, add, and remove other users\u2019 access to the database. Can view, add, edit, and remove any schema in the database. Can view, add, edit, and remove any table in the database. Can view, add, edit, and remove any column in the database. Can view, add, edit, and remove any constraint in the database. Can view, add, edit, and remove any record in the database. Can view, add, edit, and remove any exploration in the database. Can perform \u201cextract column\u201d and \u201cmove column\u201d actions Editor \u00b6 Receives Editor permissions on all schemas in the database. Can view any schema in the database. Can view any table in the database. Can view any column in the database. Can view any constraint in the database. Can view, add, edit, and remove any exploration in the database. Can view, add, edit, and remove any record in the database. Viewer \u00b6 Receives Viewer permissions on all schemas in the database. Can view any schema in the database. Can view any table in the database. Can view any column in the database. Can view any constraint in the database. Can view any exploration in the database. Can use the Data Explorer to create ad-hoc explorations using data in the database, but cannot save them. Managing Database Roles \u00b6 Note Only Admins and Database Managers can manage access to a database. Click on the Mathesar logo on the top left of the application to go to the database page. Click on the Manage Access button. Schema Roles \u00b6 There are three levels of schema roles: Managers own the schema. They can edit all data in the schema, as well as edit the structure of data (e.g. create tables, add and remove columns, etc.). They also manage access to the schema. Editors can edit all data in the schema, but cannot change the underlying data structures or manage access. Viewers have read-only access to all data in the schema. They cannot make any changes. Manager \u00b6 Can view, add, and remove other users\u2019 access to the schema. Can view, add, edit, and remove any schema in the schema. Can view, add, edit, and remove any table in the schema. Can view, add, edit, and remove any column in the schema. Can view, add, edit, and remove any constraint in the schema. Can view, add, edit, and remove any record in the schema. Can view, add, edit, and remove any exploration in the schema. Can perform \u201cextract column\u201d and \u201cmove column\u201d actions Editor \u00b6 Can view any table in the schema. Can view any column in the schema. Can view any constraint in the schema. Can view, add, edit, and remove any record in the schema. Can view, add, edit, and remove any exploration in the schema. Viewer \u00b6 Can view any table in the schema. Can view any column in the schema. Can view any constraint in the schema. Can view any exploration in the schema. Can use the Data Explorer to create ad-hoc explorations using data in the schema, but cannot save them. Managing Schema Roles \u00b6 Note Only Admins , Database Managers , and Schema Managers can manage access to a schema. Click on the Mathesar logo on the top left of the application to go to the database page. Select the appropriate schema from the list to navigate to the schema\u2019s homepage. Click on the Manage Access button. Order of Precedence \u00b6 If a user has both a Database Role and a Schema Role for a schema within the same database, the Schema Role will only have an effect if it grants more permissions. Examples: If a user is a Database Manager but has Viewer permissions on a given schema, the schema role has no effect. If a user is a Database Editor but has Manager permissions on a given schema, the schema role will take precedence.","title":"Users & access levels"},{"location":"user-guide/users/#users-access-levels","text":"Mathesar allows you to set up users with different access levels. A user\u2019s access levels determine what they can do with the data managed in Mathesar. Mathesar\u2019s installation process includes setting up the first user. This user is an Admin .","title":"Users &amp; Access Levels"},{"location":"user-guide/users/#managing-users","text":"Click on the gear icon on the top right of the application and select Administration . In the left sidebar, click on Users . Note Only Admins can add new users. Mathesar does not send invitation emails to new users (yet). You\u2019ll need to send the user their username and password yourself. The user will be prompted to change the password when they log in for the first time.","title":"Managing Users"},{"location":"user-guide/users/#user-types","text":"Users can be either Admin or Standard users.","title":"User Types"},{"location":"user-guide/users/#admin-users","text":"Admin users: can manage other users (view, add, edit, delete) have Manager permissions on all databases and schemas You cannot set granular permissions for an Admin user.","title":"Admin users"},{"location":"user-guide/users/#standard-users","text":"By default, Standard users cannot see anything in Mathesar. They will need to be granted database or schema roles individually.","title":"Standard users"},{"location":"user-guide/users/#database-roles","text":"There are three levels of database roles: Managers own the database. They can edit all data in the database, as well as edit the structure of data (e.g. create tables, add and remove columns, etc.). They also manage access to the database. Editors can edit all data in the database, but cannot change the underlying data structures or manage access. Viewers have read-only access to all data in the database. They cannot make any changes.","title":"Database Roles"},{"location":"user-guide/users/#manager","text":"Receives Manager permissions on all schemas in the database. Can view, add, and remove other users\u2019 access to the database. Can view, add, edit, and remove any schema in the database. Can view, add, edit, and remove any table in the database. Can view, add, edit, and remove any column in the database. Can view, add, edit, and remove any constraint in the database. Can view, add, edit, and remove any record in the database. Can view, add, edit, and remove any exploration in the database. Can perform \u201cextract column\u201d and \u201cmove column\u201d actions","title":"Manager"},{"location":"user-guide/users/#editor","text":"Receives Editor permissions on all schemas in the database. Can view any schema in the database. Can view any table in the database. Can view any column in the database. Can view any constraint in the database. Can view, add, edit, and remove any exploration in the database. Can view, add, edit, and remove any record in the database.","title":"Editor"},{"location":"user-guide/users/#viewer","text":"Receives Viewer permissions on all schemas in the database. Can view any schema in the database. Can view any table in the database. Can view any column in the database. Can view any constraint in the database. Can view any exploration in the database. Can use the Data Explorer to create ad-hoc explorations using data in the database, but cannot save them.","title":"Viewer"},{"location":"user-guide/users/#managing-database-roles","text":"Note Only Admins and Database Managers can manage access to a database. Click on the Mathesar logo on the top left of the application to go to the database page. Click on the Manage Access button.","title":"Managing Database Roles"},{"location":"user-guide/users/#schema-roles","text":"There are three levels of schema roles: Managers own the schema. They can edit all data in the schema, as well as edit the structure of data (e.g. create tables, add and remove columns, etc.). They also manage access to the schema. Editors can edit all data in the schema, but cannot change the underlying data structures or manage access. Viewers have read-only access to all data in the schema. They cannot make any changes.","title":"Schema Roles"},{"location":"user-guide/users/#manager_1","text":"Can view, add, and remove other users\u2019 access to the schema. Can view, add, edit, and remove any schema in the schema. Can view, add, edit, and remove any table in the schema. Can view, add, edit, and remove any column in the schema. Can view, add, edit, and remove any constraint in the schema. Can view, add, edit, and remove any record in the schema. Can view, add, edit, and remove any exploration in the schema. Can perform \u201cextract column\u201d and \u201cmove column\u201d actions","title":"Manager"},{"location":"user-guide/users/#editor_1","text":"Can view any table in the schema. Can view any column in the schema. Can view any constraint in the schema. Can view, add, edit, and remove any record in the schema. Can view, add, edit, and remove any exploration in the schema.","title":"Editor"},{"location":"user-guide/users/#viewer_1","text":"Can view any table in the schema. Can view any column in the schema. Can view any constraint in the schema. Can view any exploration in the schema. Can use the Data Explorer to create ad-hoc explorations using data in the schema, but cannot save them.","title":"Viewer"},{"location":"user-guide/users/#managing-schema-roles","text":"Note Only Admins , Database Managers , and Schema Managers can manage access to a schema. Click on the Mathesar logo on the top left of the application to go to the database page. Select the appropriate schema from the list to navigate to the schema\u2019s homepage. Click on the Manage Access button.","title":"Managing Schema Roles"},{"location":"user-guide/users/#order-of-precedence","text":"If a user has both a Database Role and a Schema Role for a schema within the same database, the Schema Role will only have an effect if it grants more permissions. Examples: If a user is a Database Manager but has Viewer permissions on a given schema, the schema role has no effect. If a user is a Database Editor but has Manager permissions on a given schema, the schema role will take precedence.","title":"Order of Precedence"}]}